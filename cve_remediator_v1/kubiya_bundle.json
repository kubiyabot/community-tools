{
  "tools": [
    {
      "name": "get_cve_info",
      "source": null,
      "alias": null,
      "description": "Get detailed information about a specific CVE",
      "type": "docker",
      "content": "python /tmp/get_cve_info.py \"{{ .cve_id }}\" ",
      "content_url": null,
      "args": [
        {
          "name": "cve_id",
          "type": "string",
          "description": "CVE ID (e.g., CVE-2021-44228)",
          "required": true,
          "default": null,
          "options": null,
          "options_from": null
        }
      ],
      "env": [],
      "secrets": [],
      "dependencies": null,
      "dependencies_url": null,
      "openapi": null,
      "with_files": [
        {
          "source": null,
          "destination": "/tmp/get_cve_info.py",
          "content": "import requests\nfrom typing import Dict\n\nNVDB_API_URL = \"https://services.nvd.nist.gov/rest/json/cves/2.0\"\n\ndef get_cve_info(cve_id: str) -> Dict:\n    params = {\n        \"cveId\": cve_id\n    }\n    \n    try:\n        response = requests.get(NVDB_API_URL, params=params)\n        response.raise_for_status()\n        data = response.json()\n        \n        if not data.get('vulnerabilities'):\n            raise ValueError(f\"No data found for CVE ID: {cve_id}\")\n            \n        vuln = data['vulnerabilities'][0]['cve']\n        \n        return {\n            'id': vuln.get('id'),\n            'published': vuln.get('published'),\n            'lastModified': vuln.get('lastModified'),\n            'description': vuln.get('descriptions', [{}])[0].get('value', 'No description available'),\n            'metrics': vuln.get('metrics', {}).get('cvssMetricV31', [{}])[0].get('cvssData', {}),\n            'references': [ref.get('url') for ref in vuln.get('references', [])]\n        }\n        \n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Failed to fetch CVE data: {str(e)}\") \n"
        }
      ],
      "with_services": [],
      "with_git_repo": null,
      "with_volumes": [],
      "entrypoint": [],
      "icon_url": "https://upload.wikimedia.org/wikipedia/commons/thumb/3/37/NIST_logo.svg/1200px-NIST_logo.svg.png",
      "image": "python:3.12-slim",
      "image_provider": null,
      "long_running": false,
      "on_start": null,
      "on_build": "\npip install requests > /dev/null\n            ",
      "on_complete": null,
      "mermaid": "graph TD\n    %% Styles\n    classDef triggerClass fill:#3498db,color:#fff,stroke:#2980b9,stroke-width:2px,font-weight:bold\n    classDef paramClass fill:#2ecc71,color:#fff,stroke:#27ae60,stroke-width:2px\n    classDef execClass fill:#e74c3c,color:#fff,stroke:#c0392b,stroke-width:2px,font-weight:bold\n    classDef envClass fill:#f39c12,color:#fff,stroke:#f1c40f,stroke-width:2px\n\n    %% Main Components\n    Trigger(\"Trigger\"):::triggerClass\n    Params(\"Parameters\"):::paramClass\n    Exec(\"get_cve_info\"):::execClass\n    Env(\"Environment\"):::envClass\n\n    %% Flow\n    Trigger --> Params --> Exec\n    Env --> Exec\n\n    %% Trigger Options\n    User(\"User\")\n    API(\"API\")\n    Webhook(\"Webhook\")\n    Cron(\"Scheduled\")\n    User --> Trigger\n    API --> Trigger\n    Webhook --> Trigger\n    Cron --> Trigger\n\n    %% Parameters\n    subgraph Parameters[\"Parameters\"]\n        direction TB\n        Param0(\"cve_id (Required)<br/>CVE ID (e.g., CVE-2021-44228)<br/>Type: string\"):::paramClass\n    end\n    Parameters --- Params\n\n    %% Execution\n    subgraph Execution[\"Execution\"]\n        direction TB\n        Code(\"Script: python /tmp/get_cve_info.py \\\"{{ .cve_id }}\\\" ...\")\n        Type(\"Type: Docker\")\n        Image(\"Docker Image: python:3.12-slim\")\n    end\n    Execution --- Exec\n\n    %% Environment\n    subgraph Environment[\"Environment\"]\n        direction TB\n    end\n    Environment --- Env\n\n    %% Context Note\n    ContextNote(\"Parameter values can be<br/>fetched from context<br/>based on the trigger\")\n    ContextNote -.-> Params",
      "workflow": false,
      "metadata": {}
    },
    {
      "name": "get_cve_remediation",
      "source": null,
      "alias": null,
      "description": "Get remediation steps for a list of CVEs",
      "type": "docker",
      "content": "python /tmp/get_remediation.py \"{{ .cve_ids }}\" ",
      "content_url": null,
      "args": [
        {
          "name": "cve_ids",
          "type": "string",
          "description": "Comma-separated list of CVE IDs",
          "required": true,
          "default": null,
          "options": null,
          "options_from": null
        }
      ],
      "env": [],
      "secrets": [],
      "dependencies": null,
      "dependencies_url": null,
      "openapi": null,
      "with_files": [
        {
          "source": null,
          "destination": "/tmp/get_remediation.py",
          "content": "import requests\nfrom typing import List\n\ndef get_remediation_info(cve_ids: List[str]) -> dict:\n    # Using OSV (Open Source Vulnerabilities) database\n    OSV_API_URL = \"https://api.osv.dev/v1/query\"\n    \n    results = {}\n    for cve_id in cve_ids:\n        try:\n            payload = {\n                \"query\": {\n                    \"package\": {},\n                    \"ecosystem\": \"cve\",\n                    \"version\": \"\",\n                    \"id\": cve_id\n                }\n            }\n            \n            response = requests.post(OSV_API_URL, json=payload)\n            response.raise_for_status()\n            data = response.json()\n            \n            if data.get('vulns'):\n                vuln = data['vulns'][0]\n                results[cve_id] = {\n                    'affected_versions': [affected.get('package', {}).get('name') for affected in vuln.get('affected', [])],\n                    'fixed_versions': [],\n                    'recommendations': []\n                }\n                \n                # Extract fixed versions and recommendations\n                for affected in vuln.get('affected', []):\n                    for ranges in affected.get('ranges', []):\n                        if ranges.get('type') == 'GIT':\n                            for event in ranges.get('events', []):\n                                if event.get('fixed'):\n                                    results[cve_id]['fixed_versions'].append(event.get('fixed'))\n                    \n                    if affected.get('database_specific', {}).get('solution'):\n                        results[cve_id]['recommendations'].append(\n                            affected['database_specific']['solution']\n                        )\n            \n        except Exception as e:\n            results[cve_id] = {\n                'error': f\"Failed to fetch remediation data: {str(e)}\"\n            }\n    \n    return results\n\ndef main():\n    import argparse\n    \n    parser = argparse.ArgumentParser(description=\"Get CVE Remediation Information\")\n    parser.add_argument(\"cve_ids\", help=\"Comma-separated list of CVE IDs\")\n    \n    args = parser.parse_args()\n    cve_list = [cve.strip() for cve in args.cve_ids.split(',')]\n    \n    try:\n        remediation_info = get_remediation_info(cve_list)\n        \n        print(\"\\nRemediation Information:\")\n        for cve_id, info in remediation_info.items():\n            print(f\"\\n{cve_id}:\")\n            if 'error' in info:\n                print(f\"Error: {info['error']}\")\n                continue\n                \n            if info['affected_versions']:\n                print(\"Affected Packages:\")\n                for pkg in info['affected_versions']:\n                    print(f\"- {pkg}\")\n                    \n            if info['fixed_versions']:\n                print(\"\\nFixed in versions:\")\n                for version in info['fixed_versions']:\n                    print(f\"- {version}\")\n                    \n            if info['recommendations']:\n                print(\"\\nRecommendations:\")\n                for rec in info['recommendations']:\n                    print(f\"- {rec}\")\n            \n    except Exception as e:\n        print(f\"Error: {str(e)}\")\n        raise RuntimeError(str(e))\n\nif __name__ == \"__main__\":\n    main() \n"
        }
      ],
      "with_services": [],
      "with_git_repo": null,
      "with_volumes": [],
      "entrypoint": [],
      "icon_url": "https://upload.wikimedia.org/wikipedia/commons/thumb/3/37/NIST_logo.svg/1200px-NIST_logo.svg.png",
      "image": "python:3.12-slim",
      "image_provider": null,
      "long_running": false,
      "on_start": null,
      "on_build": "\npip install requests > /dev/null\n            ",
      "on_complete": null,
      "mermaid": "graph TD\n    %% Styles\n    classDef triggerClass fill:#3498db,color:#fff,stroke:#2980b9,stroke-width:2px,font-weight:bold\n    classDef paramClass fill:#2ecc71,color:#fff,stroke:#27ae60,stroke-width:2px\n    classDef execClass fill:#e74c3c,color:#fff,stroke:#c0392b,stroke-width:2px,font-weight:bold\n    classDef envClass fill:#f39c12,color:#fff,stroke:#f1c40f,stroke-width:2px\n\n    %% Main Components\n    Trigger(\"Trigger\"):::triggerClass\n    Params(\"Parameters\"):::paramClass\n    Exec(\"get_cve_remediation\"):::execClass\n    Env(\"Environment\"):::envClass\n\n    %% Flow\n    Trigger --> Params --> Exec\n    Env --> Exec\n\n    %% Trigger Options\n    User(\"User\")\n    API(\"API\")\n    Webhook(\"Webhook\")\n    Cron(\"Scheduled\")\n    User --> Trigger\n    API --> Trigger\n    Webhook --> Trigger\n    Cron --> Trigger\n\n    %% Parameters\n    subgraph Parameters[\"Parameters\"]\n        direction TB\n        Param0(\"cve_ids (Required)<br/>Comma-separated list of CVE IDs<br/>Type: string\"):::paramClass\n    end\n    Parameters --- Params\n\n    %% Execution\n    subgraph Execution[\"Execution\"]\n        direction TB\n        Code(\"Script: python /tmp/get_remediation.py \\\"{{ .cve_ids }}\\\" ...\")\n        Type(\"Type: Docker\")\n        Image(\"Docker Image: python:3.12-slim\")\n    end\n    Execution --- Exec\n\n    %% Environment\n    subgraph Environment[\"Environment\"]\n        direction TB\n    end\n    Environment --- Env\n\n    %% Context Note\n    ContextNote(\"Parameter values can be<br/>fetched from context<br/>based on the trigger\")\n    ContextNote -.-> Params",
      "workflow": false,
      "metadata": {}
    }
  ],
  "errors": [],
  "python_bundle_version": "3.11.9"
}