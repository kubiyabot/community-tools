"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/api/AssistantRuntime.ts
var AssistantRuntime_exports = {};
__export(AssistantRuntime_exports, {
  AssistantRuntimeImpl: () => AssistantRuntimeImpl
});
module.exports = __toCommonJS(AssistantRuntime_exports);
var import_NestedSubscriptionSubject = require("./subscribable/NestedSubscriptionSubject.js");
var import_ThreadRuntime = require("./ThreadRuntime.js");
var import_ThreadListRuntime = require("./ThreadListRuntime.js");
var AssistantRuntimeImpl = class _AssistantRuntimeImpl {
  constructor(_core, runtimeFactory = import_ThreadRuntime.ThreadRuntimeImpl) {
    this._core = _core;
    this.threadList = new import_ThreadListRuntime.ThreadListRuntimeImpl(_core.threadList);
    this._thread = new runtimeFactory(
      new import_NestedSubscriptionSubject.NestedSubscriptionSubject({
        path: {
          ref: "threads.main",
          threadSelector: { type: "main" }
        },
        getState: () => _core.threadList.getMainThreadRuntimeCore(),
        subscribe: (callback) => _core.threadList.subscribe(callback)
      }),
      this.threadList.mainItem
      // TODO capture "main" threadListItem from context around useLocalRuntime / useExternalStoreRuntime
    );
  }
  threadList;
  _thread;
  get thread() {
    return this._thread;
  }
  switchToNewThread() {
    return this._core.threadList.switchToNewThread();
  }
  switchToThread(threadId) {
    return this._core.threadList.switchToThread(threadId);
  }
  registerModelConfigProvider(provider) {
    return this._core.registerModelConfigProvider(provider);
  }
  static create(_core, runtimeFactory = import_ThreadRuntime.ThreadRuntimeImpl) {
    return new _AssistantRuntimeImpl(_core, runtimeFactory);
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  AssistantRuntimeImpl
});
//# sourceMappingURL=AssistantRuntime.js.map