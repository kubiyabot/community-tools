import { ThreadListRuntimeCore } from "../runtimes/core/ThreadListRuntimeCore";
import { Unsubscribe } from "../types";
import { ThreadListItemRuntime, ThreadListItemRuntimeImpl } from "./ThreadListItemRuntime";
export type ThreadListState = {
    readonly mainThreadId: string;
    readonly newThread: string | undefined;
    readonly threads: readonly string[];
    readonly archivedThreads: readonly string[];
};
export type ThreadListRuntime = {
    getState(): ThreadListState;
    subscribe(callback: () => void): Unsubscribe;
    readonly mainItem: ThreadListItemRuntime;
    getItemById(threadId: string): ThreadListItemRuntime;
    getItemByIndex(idx: number): ThreadListItemRuntime;
    getArchivedItemByIndex(idx: number): ThreadListItemRuntime;
};
export type ThreadListRuntimeCoreBinding = ThreadListRuntimeCore;
export declare class ThreadListRuntimeImpl implements ThreadListRuntime {
    private _core;
    private _getState;
    constructor(_core: ThreadListRuntimeCoreBinding);
    getState(): ThreadListState;
    subscribe(callback: () => void): Unsubscribe;
    private _mainThreadListItemRuntime;
    get mainItem(): ThreadListItemRuntimeImpl;
    getItemByIndex(idx: number): ThreadListItemRuntimeImpl;
    getArchivedItemByIndex(idx: number): ThreadListItemRuntimeImpl;
    getItemById(threadId: string): ThreadListItemRuntimeImpl;
}
//# sourceMappingURL=ThreadListRuntime.d.ts.map