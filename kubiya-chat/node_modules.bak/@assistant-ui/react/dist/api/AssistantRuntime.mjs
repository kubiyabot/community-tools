// src/api/AssistantRuntime.ts
import { NestedSubscriptionSubject } from "./subscribable/NestedSubscriptionSubject.mjs";
import {
  ThreadRuntimeImpl
} from "./ThreadRuntime.mjs";
import { ThreadListRuntimeImpl } from "./ThreadListRuntime.mjs";
var AssistantRuntimeImpl = class _AssistantRuntimeImpl {
  constructor(_core, runtimeFactory = ThreadRuntimeImpl) {
    this._core = _core;
    this.threadList = new ThreadListRuntimeImpl(_core.threadList);
    this._thread = new runtimeFactory(
      new NestedSubscriptionSubject({
        path: {
          ref: "threads.main",
          threadSelector: { type: "main" }
        },
        getState: () => _core.threadList.getMainThreadRuntimeCore(),
        subscribe: (callback) => _core.threadList.subscribe(callback)
      }),
      this.threadList.mainItem
      // TODO capture "main" threadListItem from context around useLocalRuntime / useExternalStoreRuntime
    );
  }
  threadList;
  _thread;
  get thread() {
    return this._thread;
  }
  switchToNewThread() {
    return this._core.threadList.switchToNewThread();
  }
  switchToThread(threadId) {
    return this._core.threadList.switchToThread(threadId);
  }
  registerModelConfigProvider(provider) {
    return this._core.registerModelConfigProvider(provider);
  }
  static create(_core, runtimeFactory = ThreadRuntimeImpl) {
    return new _AssistantRuntimeImpl(_core, runtimeFactory);
  }
};
export {
  AssistantRuntimeImpl
};
//# sourceMappingURL=AssistantRuntime.mjs.map