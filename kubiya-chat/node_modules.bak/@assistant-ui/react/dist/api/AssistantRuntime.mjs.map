{"version":3,"sources":["../../src/api/AssistantRuntime.ts"],"sourcesContent":["import { AssistantRuntimeCore } from \"../runtimes/core/AssistantRuntimeCore\";\nimport { NestedSubscriptionSubject } from \"./subscribable/NestedSubscriptionSubject\";\nimport { ModelConfigProvider } from \"../types/ModelConfigTypes\";\nimport {\n  ThreadListItemRuntimeBinding,\n  ThreadRuntime,\n  ThreadRuntimeCoreBinding,\n  ThreadRuntimeImpl,\n} from \"./ThreadRuntime\";\nimport { Unsubscribe } from \"../types\";\nimport { ThreadListRuntime, ThreadListRuntimeImpl } from \"./ThreadListRuntime\";\n\nexport type AssistantRuntime = {\n  /**\n   * The currently selected main thread.\n   */\n  readonly thread: ThreadRuntime;\n\n  /**\n   * The thread manager, to rename, archive and delete threads.\n   */\n  readonly threadList: ThreadListRuntime;\n\n  /**\n   * Switch to a new thread.\n   */\n  switchToNewThread(): void;\n\n  /**\n   * Switch to a thread.\n   *\n   * @param threadId The thread ID to switch to.\n   */\n  switchToThread(threadId: string): void;\n\n  /**\n   * Register a model config provider. Model config providers are configuration such as system message, temperature, etc. that are set in the frontend.\n   *\n   * @param provider The model config provider to register.\n   */\n  registerModelConfigProvider(provider: ModelConfigProvider): Unsubscribe;\n};\n\nexport class AssistantRuntimeImpl implements AssistantRuntime {\n  public readonly threadList;\n  public readonly _thread: ThreadRuntime;\n\n  protected constructor(\n    private readonly _core: AssistantRuntimeCore,\n    runtimeFactory: new (\n      binding: ThreadRuntimeCoreBinding,\n      threadListItemBinding: ThreadListItemRuntimeBinding,\n    ) => ThreadRuntime = ThreadRuntimeImpl,\n  ) {\n    this.threadList = new ThreadListRuntimeImpl(_core.threadList);\n    this._thread = new runtimeFactory(\n      new NestedSubscriptionSubject({\n        path: {\n          ref: \"threads.main\",\n          threadSelector: { type: \"main\" },\n        },\n        getState: () => _core.threadList.getMainThreadRuntimeCore(),\n        subscribe: (callback) => _core.threadList.subscribe(callback),\n      }),\n      this.threadList.mainItem, // TODO capture \"main\" threadListItem from context around useLocalRuntime / useExternalStoreRuntime\n    );\n  }\n\n  public get thread() {\n    return this._thread;\n  }\n\n  public switchToNewThread() {\n    return this._core.threadList.switchToNewThread();\n  }\n\n  public switchToThread(threadId: string) {\n    return this._core.threadList.switchToThread(threadId);\n  }\n\n  public registerModelConfigProvider(provider: ModelConfigProvider) {\n    return this._core.registerModelConfigProvider(provider);\n  }\n\n  public static create(\n    _core: AssistantRuntimeCore,\n    runtimeFactory: new (\n      binding: ThreadRuntimeCoreBinding,\n      threadListItemBinding: ThreadListItemRuntimeBinding,\n    ) => ThreadRuntime = ThreadRuntimeImpl,\n  ): AssistantRuntime {\n    return new AssistantRuntimeImpl(_core, runtimeFactory);\n  }\n}\n"],"mappings":";AACA,SAAS,iCAAiC;AAE1C;AAAA,EAIE;AAAA,OACK;AAEP,SAA4B,6BAA6B;AAiClD,IAAM,uBAAN,MAAM,sBAAiD;AAAA,EAIlD,YACS,OACjB,iBAGqB,mBACrB;AALiB;AAMjB,SAAK,aAAa,IAAI,sBAAsB,MAAM,UAAU;AAC5D,SAAK,UAAU,IAAI;AAAA,MACjB,IAAI,0BAA0B;AAAA,QAC5B,MAAM;AAAA,UACJ,KAAK;AAAA,UACL,gBAAgB,EAAE,MAAM,OAAO;AAAA,QACjC;AAAA,QACA,UAAU,MAAM,MAAM,WAAW,yBAAyB;AAAA,QAC1D,WAAW,CAAC,aAAa,MAAM,WAAW,UAAU,QAAQ;AAAA,MAC9D,CAAC;AAAA,MACD,KAAK,WAAW;AAAA;AAAA,IAClB;AAAA,EACF;AAAA,EAtBgB;AAAA,EACA;AAAA,EAuBhB,IAAW,SAAS;AAClB,WAAO,KAAK;AAAA,EACd;AAAA,EAEO,oBAAoB;AACzB,WAAO,KAAK,MAAM,WAAW,kBAAkB;AAAA,EACjD;AAAA,EAEO,eAAe,UAAkB;AACtC,WAAO,KAAK,MAAM,WAAW,eAAe,QAAQ;AAAA,EACtD;AAAA,EAEO,4BAA4B,UAA+B;AAChE,WAAO,KAAK,MAAM,4BAA4B,QAAQ;AAAA,EACxD;AAAA,EAEA,OAAc,OACZ,OACA,iBAGqB,mBACH;AAClB,WAAO,IAAI,sBAAqB,OAAO,cAAc;AAAA,EACvD;AACF;","names":[]}