import { AssistantRuntimeCore } from "../runtimes/core/AssistantRuntimeCore";
import { ModelConfigProvider } from "../types/ModelConfigTypes";
import { ThreadListItemRuntimeBinding, ThreadRuntime, ThreadRuntimeCoreBinding } from "./ThreadRuntime";
import { Unsubscribe } from "../types";
import { ThreadListRuntime, ThreadListRuntimeImpl } from "./ThreadListRuntime";
export type AssistantRuntime = {
    /**
     * The currently selected main thread.
     */
    readonly thread: ThreadRuntime;
    /**
     * The thread manager, to rename, archive and delete threads.
     */
    readonly threadList: ThreadListRuntime;
    /**
     * Switch to a new thread.
     */
    switchToNewThread(): void;
    /**
     * Switch to a thread.
     *
     * @param threadId The thread ID to switch to.
     */
    switchToThread(threadId: string): void;
    /**
     * Register a model config provider. Model config providers are configuration such as system message, temperature, etc. that are set in the frontend.
     *
     * @param provider The model config provider to register.
     */
    registerModelConfigProvider(provider: ModelConfigProvider): Unsubscribe;
};
export declare class AssistantRuntimeImpl implements AssistantRuntime {
    private readonly _core;
    readonly threadList: ThreadListRuntimeImpl;
    readonly _thread: ThreadRuntime;
    protected constructor(_core: AssistantRuntimeCore, runtimeFactory?: new (binding: ThreadRuntimeCoreBinding, threadListItemBinding: ThreadListItemRuntimeBinding) => ThreadRuntime);
    get thread(): ThreadRuntime;
    switchToNewThread(): Promise<void>;
    switchToThread(threadId: string): Promise<void>;
    registerModelConfigProvider(provider: ModelConfigProvider): Unsubscribe;
    static create(_core: AssistantRuntimeCore, runtimeFactory?: new (binding: ThreadRuntimeCoreBinding, threadListItemBinding: ThreadListItemRuntimeBinding) => ThreadRuntime): AssistantRuntime;
}
//# sourceMappingURL=AssistantRuntime.d.ts.map