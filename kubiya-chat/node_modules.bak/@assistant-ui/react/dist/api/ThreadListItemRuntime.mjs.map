{"version":3,"sources":["../../src/api/ThreadListItemRuntime.ts"],"sourcesContent":["import { Unsubscribe } from \"../types\";\nimport { ThreadListItemRuntimePath } from \"./RuntimePathTypes\";\nimport { SubscribableWithState } from \"./subscribable/Subscribable\";\nimport { ThreadListRuntimeCoreBinding } from \"./ThreadListRuntime\";\n\nexport type ThreadListItemEventType = \"switched-to\" | \"switched-away\";\n\nexport type ThreadListItemState = {\n  readonly isMain: boolean;\n\n  readonly id: string;\n  readonly remoteId: string | undefined;\n  readonly externalId: string | undefined;\n\n  /**\n   * @deprecated This field was renamed to `id`. This field will be removed in 0.8.0.\n   */\n  readonly threadId: string;\n\n  readonly status: \"archived\" | \"regular\" | \"new\" | \"deleted\";\n  readonly title?: string | undefined;\n};\n\nexport type ThreadListItemRuntime = {\n  readonly path: ThreadListItemRuntimePath;\n  getState(): ThreadListItemState;\n\n  switchTo(): Promise<void>;\n  rename(newTitle: string): Promise<void>;\n  archive(): Promise<void>;\n  unarchive(): Promise<void>;\n  delete(): Promise<void>;\n\n  subscribe(callback: () => void): Unsubscribe;\n\n  unstable_on(\n    event: ThreadListItemEventType,\n    callback: () => void,\n  ): Unsubscribe;\n};\n\nexport type ThreadListItemStateBinding = SubscribableWithState<\n  ThreadListItemState,\n  ThreadListItemRuntimePath\n>;\n\nexport class ThreadListItemRuntimeImpl implements ThreadListItemRuntime {\n  public get path() {\n    return this._core.path;\n  }\n\n  constructor(\n    private _core: ThreadListItemStateBinding,\n    private _threadListBinding: ThreadListRuntimeCoreBinding,\n  ) {}\n\n  public getState(): ThreadListItemState {\n    return this._core.getState();\n  }\n\n  public switchTo(): Promise<void> {\n    const state = this._core.getState();\n    return this._threadListBinding.switchToThread(state.id);\n  }\n\n  public rename(newTitle: string): Promise<void> {\n    const state = this._core.getState();\n\n    return this._threadListBinding.rename(state.id, newTitle);\n  }\n\n  public archive(): Promise<void> {\n    const state = this._core.getState();\n\n    return this._threadListBinding.archive(state.id);\n  }\n\n  public unarchive(): Promise<void> {\n    const state = this._core.getState();\n\n    return this._threadListBinding.unarchive(state.id);\n  }\n\n  public delete(): Promise<void> {\n    const state = this._core.getState();\n\n    return this._threadListBinding.delete(state.id);\n  }\n\n  public unstable_on(event: ThreadListItemEventType, callback: () => void) {\n    let prevIsMain = this._core.getState().isMain;\n    return this.subscribe(() => {\n      const newIsMain = this._core.getState().isMain;\n      if (prevIsMain === newIsMain) return;\n      prevIsMain = newIsMain;\n\n      if (event === \"switched-to\" && !newIsMain) return;\n      if (event === \"switched-away\" && newIsMain) return;\n      callback();\n    });\n  }\n\n  public subscribe(callback: () => void): Unsubscribe {\n    return this._core.subscribe(callback);\n  }\n}\n"],"mappings":";AA8CO,IAAM,4BAAN,MAAiE;AAAA,EAKtE,YACU,OACA,oBACR;AAFQ;AACA;AAAA,EACP;AAAA,EAPH,IAAW,OAAO;AAChB,WAAO,KAAK,MAAM;AAAA,EACpB;AAAA,EAOO,WAAgC;AACrC,WAAO,KAAK,MAAM,SAAS;AAAA,EAC7B;AAAA,EAEO,WAA0B;AAC/B,UAAM,QAAQ,KAAK,MAAM,SAAS;AAClC,WAAO,KAAK,mBAAmB,eAAe,MAAM,EAAE;AAAA,EACxD;AAAA,EAEO,OAAO,UAAiC;AAC7C,UAAM,QAAQ,KAAK,MAAM,SAAS;AAElC,WAAO,KAAK,mBAAmB,OAAO,MAAM,IAAI,QAAQ;AAAA,EAC1D;AAAA,EAEO,UAAyB;AAC9B,UAAM,QAAQ,KAAK,MAAM,SAAS;AAElC,WAAO,KAAK,mBAAmB,QAAQ,MAAM,EAAE;AAAA,EACjD;AAAA,EAEO,YAA2B;AAChC,UAAM,QAAQ,KAAK,MAAM,SAAS;AAElC,WAAO,KAAK,mBAAmB,UAAU,MAAM,EAAE;AAAA,EACnD;AAAA,EAEO,SAAwB;AAC7B,UAAM,QAAQ,KAAK,MAAM,SAAS;AAElC,WAAO,KAAK,mBAAmB,OAAO,MAAM,EAAE;AAAA,EAChD;AAAA,EAEO,YAAY,OAAgC,UAAsB;AACvE,QAAI,aAAa,KAAK,MAAM,SAAS,EAAE;AACvC,WAAO,KAAK,UAAU,MAAM;AAC1B,YAAM,YAAY,KAAK,MAAM,SAAS,EAAE;AACxC,UAAI,eAAe,UAAW;AAC9B,mBAAa;AAEb,UAAI,UAAU,iBAAiB,CAAC,UAAW;AAC3C,UAAI,UAAU,mBAAmB,UAAW;AAC5C,eAAS;AAAA,IACX,CAAC;AAAA,EACH;AAAA,EAEO,UAAU,UAAmC;AAClD,WAAO,KAAK,MAAM,UAAU,QAAQ;AAAA,EACtC;AACF;","names":[]}