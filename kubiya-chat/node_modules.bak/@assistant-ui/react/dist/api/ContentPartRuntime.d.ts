import { ThreadAssistantContentPart, ThreadUserContentPart, ContentPartStatus, ToolCallContentPartStatus } from "../types/AssistantTypes";
import { ThreadRuntimeCoreBinding } from "./ThreadRuntime";
import { MessageStateBinding } from "./MessageRuntime";
import { SubscribableWithState } from "./subscribable/Subscribable";
import { Unsubscribe } from "../types";
import { ContentPartRuntimePath } from "./RuntimePathTypes";
export type ContentPartState = (ThreadUserContentPart | ThreadAssistantContentPart) & {
    readonly status: ContentPartStatus | ToolCallContentPartStatus;
};
type ContentPartSnapshotBinding = SubscribableWithState<ContentPartState, ContentPartRuntimePath>;
export type ContentPartRuntime = {
    /**
     * Add tool result to a tool call content part that has no tool result yet.
     * This is useful when you are collecting a tool result via user input ("human tool calls").
     */
    addToolResult(result: any): void;
    readonly path: ContentPartRuntimePath;
    getState(): ContentPartState;
    subscribe(callback: () => void): Unsubscribe;
};
export declare class ContentPartRuntimeImpl implements ContentPartRuntime {
    private contentBinding;
    private messageApi?;
    private threadApi?;
    get path(): ContentPartRuntimePath;
    constructor(contentBinding: ContentPartSnapshotBinding, messageApi?: MessageStateBinding | undefined, threadApi?: ThreadRuntimeCoreBinding | undefined);
    getState(): ContentPartState;
    addToolResult(result: any): void;
    subscribe(callback: () => void): Unsubscribe;
}
export {};
//# sourceMappingURL=ContentPartRuntime.d.ts.map