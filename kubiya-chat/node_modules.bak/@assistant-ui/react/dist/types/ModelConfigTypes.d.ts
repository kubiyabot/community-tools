import { z } from "zod";
import type { JSONSchema7 } from "json-schema";
import { Unsubscribe } from "./Unsubscribe";
export declare const LanguageModelV1CallSettingsSchema: z.ZodObject<{
    maxTokens: z.ZodOptional<z.ZodNumber>;
    temperature: z.ZodOptional<z.ZodNumber>;
    topP: z.ZodOptional<z.ZodNumber>;
    presencePenalty: z.ZodOptional<z.ZodNumber>;
    frequencyPenalty: z.ZodOptional<z.ZodNumber>;
    seed: z.ZodOptional<z.ZodNumber>;
    headers: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodOptional<z.ZodString>>>;
}, "strip", z.ZodTypeAny, {
    maxTokens?: number | undefined;
    temperature?: number | undefined;
    topP?: number | undefined;
    presencePenalty?: number | undefined;
    frequencyPenalty?: number | undefined;
    seed?: number | undefined;
    headers?: Record<string, string | undefined> | undefined;
}, {
    maxTokens?: number | undefined;
    temperature?: number | undefined;
    topP?: number | undefined;
    presencePenalty?: number | undefined;
    frequencyPenalty?: number | undefined;
    seed?: number | undefined;
    headers?: Record<string, string | undefined> | undefined;
}>;
export type LanguageModelV1CallSettings = z.infer<typeof LanguageModelV1CallSettingsSchema>;
export declare const LanguageModelConfigSchema: z.ZodObject<{
    apiKey: z.ZodOptional<z.ZodString>;
    baseUrl: z.ZodOptional<z.ZodString>;
    modelName: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    apiKey?: string | undefined;
    baseUrl?: string | undefined;
    modelName?: string | undefined;
}, {
    apiKey?: string | undefined;
    baseUrl?: string | undefined;
    modelName?: string | undefined;
}>;
export type LanguageModelConfig = z.infer<typeof LanguageModelConfigSchema>;
type ToolExecuteFunction<TArgs, TResult> = (args: TArgs, context: {
    abortSignal: AbortSignal;
}) => TResult | Promise<TResult>;
export type Tool<TArgs extends Record<string, unknown> = Record<string | number, unknown>, TResult = unknown> = {
    description?: string | undefined;
    parameters: z.ZodSchema<TArgs> | JSONSchema7;
    execute?: ToolExecuteFunction<TArgs, TResult>;
};
export type ModelConfig = {
    priority?: number | undefined;
    system?: string | undefined;
    tools?: Record<string, Tool<any, any>> | undefined;
    callSettings?: LanguageModelV1CallSettings | undefined;
    config?: LanguageModelConfig | undefined;
};
export type ModelConfigProvider = {
    getModelConfig: () => ModelConfig;
    subscribe?: (callback: () => void) => Unsubscribe;
};
export declare const mergeModelConfigs: (configSet: Set<ModelConfigProvider>) => ModelConfig;
export {};
//# sourceMappingURL=ModelConfigTypes.d.ts.map