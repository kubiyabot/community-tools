{"version":3,"sources":["../../src/types/AssistantTypes.ts"],"sourcesContent":["import type { ReactNode } from \"react\";\nimport { CompleteAttachment } from \"./AttachmentTypes\";\n\nexport type MessageRole = \"user\" | \"assistant\" | \"system\";\n\nexport type TextContentPart = {\n  readonly type: \"text\";\n  readonly text: string;\n};\n\nexport type ImageContentPart = {\n  readonly type: \"image\";\n  readonly image: string;\n};\n\nexport type FileContentPart = {\n  readonly type: \"file\";\n  readonly data: string;\n  readonly mimeType: string;\n};\n\nexport type Unstable_AudioContentPart = {\n  readonly type: \"audio\";\n  readonly audio: {\n    readonly data: string;\n    readonly format: \"mp3\" | \"wav\";\n  };\n};\n\n/**\n * @deprecated UI content parts are deprecated and will be removed in v0.8.0.\n * Migration guide for external-store users using UI content parts:\n * If you must, store UI elements on your external store messages, update your\n * external store converter:\n * ```ts\n * const UI_PLACEHOLDER = Object.freeze({ type: \"text\", text: \"UI content placeholder\" });\n * const convertMessage = (message: TMessage): ThreadMessageLike => ({\n *   content: [\n *     // other content parts,\n *     UI_PLACEHOLDER\n *   ],\n * });\n * ```\n *\n * Then, define a custom `TextContentPartComponent`:\n *\n * ```tsx\n * const MyText: FC = () => {\n *   const isUIPlaceholder = useContentPart(p => p === UI_PLACEHOLDER);\n *\n *   // this assumes that you have a `display` field on your original message objects before conversion.\n *   const ui = useMessage(m => isUIPlaceholder ? getExternalStoreMessage(m).display : undefined);\n *   if (ui) {\n *     return ui;\n *   }\n *\n *   return <MarkdownText />; // your default text component\n * }\n * ```\n *\n *  Pass this component to your Thread:\n *\n * ```tsx\n * <Thread assistantMessage={{ components: { Text: MyText } }} userMessage={{ components: { Text: MyText } }} />\n * ```\n */\nexport type UIContentPart = {\n  readonly type: \"ui\";\n  readonly display: ReactNode;\n};\n\nexport type CoreToolCallContentPart<\n  TArgs extends Record<string, unknown> = Record<string | number, unknown>,\n  TResult = unknown,\n> = {\n  readonly type: \"tool-call\";\n  readonly toolCallId: string;\n  readonly toolName: string;\n  readonly args: TArgs;\n  readonly result?: TResult | undefined;\n  readonly isError?: boolean | undefined;\n};\n\nexport type ToolCallContentPart<\n  TArgs extends Record<string, unknown> = Record<string | number, unknown>,\n  TResult = unknown,\n> = CoreToolCallContentPart<TArgs, TResult> & {\n  readonly argsText: string;\n};\n\nexport type ThreadUserContentPart =\n  | TextContentPart\n  | ImageContentPart\n  | FileContentPart\n  | Unstable_AudioContentPart\n  | UIContentPart;\n\nexport type ThreadAssistantContentPart =\n  | TextContentPart\n  | ToolCallContentPart\n  | UIContentPart;\n\ntype MessageCommonProps = {\n  readonly id: string;\n  readonly createdAt: Date;\n};\n\nexport type ThreadStep = {\n  readonly usage?:\n    | {\n        readonly promptTokens: number;\n        readonly completionTokens: number;\n      }\n    | undefined;\n};\n\nexport type ContentPartStatus =\n  | {\n      readonly type: \"running\";\n    }\n  | {\n      readonly type: \"complete\";\n    }\n  | {\n      readonly type: \"incomplete\";\n      readonly reason:\n        | \"cancelled\"\n        | \"length\"\n        | \"content-filter\"\n        | \"other\"\n        | \"error\";\n      readonly error?: unknown;\n    };\n\nexport type ToolCallContentPartStatus =\n  | {\n      readonly type: \"requires-action\";\n      readonly reason: \"tool-calls\";\n    }\n  | ContentPartStatus;\n\nexport type MessageStatus =\n  | {\n      readonly type: \"running\";\n    }\n  | {\n      readonly type: \"requires-action\";\n      readonly reason: \"tool-calls\";\n    }\n  | {\n      readonly type: \"complete\";\n      readonly reason: \"stop\" | \"unknown\";\n    }\n  | {\n      readonly type: \"incomplete\";\n      readonly reason:\n        | \"cancelled\"\n        | \"tool-calls\"\n        | \"length\"\n        | \"content-filter\"\n        | \"other\"\n        | \"error\";\n      readonly error?: unknown;\n    };\n\nexport type ThreadSystemMessage = MessageCommonProps & {\n  readonly role: \"system\";\n  readonly content: readonly [TextContentPart];\n  readonly metadata: {\n    readonly custom: Record<string, unknown>;\n  };\n};\n\nexport type ThreadUserMessage = MessageCommonProps & {\n  readonly role: \"user\";\n  readonly content: readonly ThreadUserContentPart[];\n  readonly attachments: readonly CompleteAttachment[];\n  readonly metadata: {\n    readonly custom: Record<string, unknown>;\n  };\n};\n\nexport type ThreadAssistantMessage = MessageCommonProps & {\n  readonly role: \"assistant\";\n  readonly content: readonly ThreadAssistantContentPart[];\n  readonly status: MessageStatus;\n  readonly metadata: {\n    readonly unstable_data: readonly unknown[];\n    readonly steps: readonly ThreadStep[];\n    readonly custom: Record<string, unknown>;\n  };\n};\n\nexport type RunConfig = {\n  // TODO allow user customization via global type overrides\n  readonly custom?: Record<string, unknown>;\n};\n\nexport type AppendMessage = CoreMessage & {\n  parentId: string | null;\n\n  /** The ID of the message that was edited or undefined. */\n  sourceId: string | null;\n  runConfig: RunConfig | undefined;\n\n  attachments: readonly CompleteAttachment[];\n  startRun?: boolean | undefined;\n};\n\ntype BaseThreadMessage = {\n  readonly status?: ThreadAssistantMessage[\"status\"];\n  readonly metadata: {\n    readonly unstable_data?: readonly unknown[];\n    readonly steps?: readonly ThreadStep[];\n    readonly custom: Record<string, unknown>;\n  };\n  readonly attachments?: ThreadUserMessage[\"attachments\"];\n};\n\nexport type ThreadMessage = BaseThreadMessage &\n  (ThreadSystemMessage | ThreadUserMessage | ThreadAssistantMessage);\n\n/** Core Message Types (without UI content parts) */\n\nexport type CoreUserContentPart =\n  | TextContentPart\n  | ImageContentPart\n  | FileContentPart\n  | Unstable_AudioContentPart;\nexport type CoreAssistantContentPart =\n  | TextContentPart\n  | CoreToolCallContentPart;\n\nexport type CoreSystemMessage = {\n  role: \"system\";\n  content: readonly [TextContentPart];\n};\n\nexport type CoreUserMessage = {\n  role: \"user\";\n  content: readonly CoreUserContentPart[];\n};\n\nexport type CoreAssistantMessage = {\n  role: \"assistant\";\n  content: readonly CoreAssistantContentPart[];\n};\n\nexport type CoreMessage =\n  | CoreSystemMessage\n  | CoreUserMessage\n  | CoreAssistantMessage;\n"],"mappings":";;;;;;;;;;;;;;;;AAAA;AAAA;","names":[]}