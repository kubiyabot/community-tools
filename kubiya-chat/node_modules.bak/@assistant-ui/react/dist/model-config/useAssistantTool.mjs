"use client";

// src/model-config/useAssistantTool.tsx
import { useEffect } from "react";
import {
  useAssistantRuntime,
  useToolUIsStore
} from "../context/react/AssistantContext.mjs";
var useAssistantTool = (tool) => {
  const assistantRuntime = useAssistantRuntime();
  const toolUIsStore = useToolUIsStore();
  useEffect(() => {
    return tool.render ? toolUIsStore.getState().setToolUI(tool.toolName, tool.render) : void 0;
  }, [toolUIsStore, tool.toolName, tool.render]);
  useEffect(() => {
    const { toolName, render, disabled, ...rest } = tool;
    if (disabled) return;
    const config = {
      tools: {
        [toolName]: rest
      }
    };
    return assistantRuntime.registerModelConfigProvider({
      getModelConfig: () => config
    });
  }, [assistantRuntime, tool]);
};
export {
  useAssistantTool
};
//# sourceMappingURL=useAssistantTool.mjs.map