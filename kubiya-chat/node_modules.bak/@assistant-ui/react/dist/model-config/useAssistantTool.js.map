{"version":3,"sources":["../../src/model-config/useAssistantTool.tsx"],"sourcesContent":["\"use client\";\n\nimport { useEffect } from \"react\";\nimport {\n  useAssistantRuntime,\n  useToolUIsStore,\n} from \"../context/react/AssistantContext\";\nimport type { ToolCallContentPartComponent } from \"../types/ContentPartComponentTypes\";\nimport type { Tool } from \"../types/ModelConfigTypes\";\n\nexport type AssistantToolProps<\n  TArgs extends Record<string, unknown>,\n  TResult,\n> = Tool<TArgs, TResult> & {\n  toolName: string;\n  render?: ToolCallContentPartComponent<TArgs, TResult> | undefined;\n  disabled?: boolean | undefined;\n};\n\nexport const useAssistantTool = <\n  TArgs extends Record<string, unknown>,\n  TResult,\n>(\n  tool: AssistantToolProps<TArgs, TResult>,\n) => {\n  const assistantRuntime = useAssistantRuntime();\n  const toolUIsStore = useToolUIsStore();\n\n  useEffect(() => {\n    return tool.render\n      ? toolUIsStore.getState().setToolUI(tool.toolName, tool.render)\n      : undefined;\n  }, [toolUIsStore, tool.toolName, tool.render]);\n\n  useEffect(() => {\n    const { toolName, render, disabled, ...rest } = tool;\n    if (disabled) return;\n\n    const config = {\n      tools: {\n        [toolName]: rest,\n      },\n    };\n    return assistantRuntime.registerModelConfigProvider({\n      getModelConfig: () => config,\n    });\n  }, [assistantRuntime, tool]);\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,mBAA0B;AAC1B,8BAGO;AAaA,IAAM,mBAAmB,CAI9B,SACG;AACH,QAAM,uBAAmB,6CAAoB;AAC7C,QAAM,mBAAe,yCAAgB;AAErC,8BAAU,MAAM;AACd,WAAO,KAAK,SACR,aAAa,SAAS,EAAE,UAAU,KAAK,UAAU,KAAK,MAAM,IAC5D;AAAA,EACN,GAAG,CAAC,cAAc,KAAK,UAAU,KAAK,MAAM,CAAC;AAE7C,8BAAU,MAAM;AACd,UAAM,EAAE,UAAU,QAAQ,UAAU,GAAG,KAAK,IAAI;AAChD,QAAI,SAAU;AAEd,UAAM,SAAS;AAAA,MACb,OAAO;AAAA,QACL,CAAC,QAAQ,GAAG;AAAA,MACd;AAAA,IACF;AACA,WAAO,iBAAiB,4BAA4B;AAAA,MAClD,gBAAgB,MAAM;AAAA,IACxB,CAAC;AAAA,EACH,GAAG,CAAC,kBAAkB,IAAI,CAAC;AAC7B;","names":[]}