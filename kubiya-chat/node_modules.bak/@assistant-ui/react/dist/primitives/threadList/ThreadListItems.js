"use strict";
"use client";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/primitives/threadList/ThreadListItems.tsx
var ThreadListItems_exports = {};
__export(ThreadListItems_exports, {
  ThreadListPrimitiveItems: () => ThreadListPrimitiveItems
});
module.exports = __toCommonJS(ThreadListItems_exports);
var import_react = require("react");
var import_ThreadListItemRuntimeProvider = require("../../context/providers/ThreadListItemRuntimeProvider.js");
var import_context = require("../../context/index.js");
var import_jsx_runtime = require("react/jsx-runtime");
var ThreadListItemImpl = ({
  partIndex,
  archived,
  components
}) => {
  const assistantRuntime = (0, import_context.useAssistantRuntime)();
  const runtime = (0, import_react.useMemo)(
    () => archived ? assistantRuntime.threadList.getArchivedItemByIndex(partIndex) : assistantRuntime.threadList.getItemByIndex(partIndex),
    [assistantRuntime, partIndex, archived]
  );
  const ThreadListItemComponent = components.ThreadListItem;
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_ThreadListItemRuntimeProvider.ThreadListItemRuntimeProvider, { runtime, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(ThreadListItemComponent, {}) });
};
var ThreadListItem = (0, import_react.memo)(
  ThreadListItemImpl,
  (prev, next) => prev.partIndex === next.partIndex && prev.archived === next.archived && prev.components.ThreadListItem === next.components.ThreadListItem
);
var ThreadListPrimitiveItems = ({
  archived = false,
  components
}) => {
  const contentLength = (0, import_context.useThreadList)(
    (s) => archived ? s.archivedThreads.length : s.threads.length
  );
  return Array.from({ length: contentLength }, (_, index) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
    ThreadListItem,
    {
      partIndex: index,
      archived,
      components
    },
    index
  ));
};
ThreadListPrimitiveItems.displayName = "ThreadListPrimitive.Items";
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ThreadListPrimitiveItems
});
//# sourceMappingURL=ThreadListItems.js.map