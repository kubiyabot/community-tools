"use strict";
"use client";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/ui/thread-config.tsx
var thread_config_exports = {};
__export(thread_config_exports, {
  ThreadConfigProvider: () => ThreadConfigProvider,
  useThreadConfig: () => useThreadConfig
});
module.exports = __toCommonJS(thread_config_exports);
var import_react = require("react");
var import_context = require("../context/index.js");
var import_AssistantContext = require("../context/react/AssistantContext.js");
var import_jsx_runtime = require("react/jsx-runtime");
var ThreadConfigContext = (0, import_react.createContext)({});
var useThreadConfig = () => {
  return (0, import_react.useContext)(ThreadConfigContext);
};
var ThreadConfigProvider = ({
  children,
  config
}) => {
  const hasAssistant = !!(0, import_AssistantContext.useAssistantRuntime)({ optional: true });
  const hasConfig = config && Object.keys(config).length > 0;
  const outerConfig = useThreadConfig();
  if (hasConfig && Object.keys(outerConfig).length > 0) {
    throw new Error(
      "You are providing ThreadConfig to several nested components. Please provide all configuration to the same component."
    );
  }
  const configProvider = hasConfig ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)(ThreadConfigContext.Provider, { value: config, children }) : /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_jsx_runtime.Fragment, { children });
  if (!config?.runtime) return configProvider;
  if (hasAssistant) {
    throw new Error(
      "You provided a runtime to <Thread> while simulataneously using <AssistantRuntimeProvider>. This is not allowed."
    );
  }
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_context.AssistantRuntimeProvider, { runtime: config.runtime, children: configProvider });
};
ThreadConfigProvider.displayName = "ThreadConfigProvider";
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ThreadConfigProvider,
  useThreadConfig
});
//# sourceMappingURL=thread-config.js.map