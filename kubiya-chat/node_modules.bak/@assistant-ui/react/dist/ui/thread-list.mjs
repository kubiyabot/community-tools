"use client";

// src/ui/thread-list.tsx
import { forwardRef } from "react";
import { PlusIcon } from "lucide-react";
import { withDefaults } from "./utils/withDefaults.mjs";
import { ThreadListPrimitive } from "../primitives/index.mjs";
import ThreadListItem from "./thread-list-item.mjs";
import { useThreadConfig } from "./thread-config.mjs";
import { Button } from "./base/index.mjs";
import { jsx, jsxs } from "react/jsx-runtime";
var ThreadList = () => {
  return /* @__PURE__ */ jsxs(ThreadListRoot, { children: [
    /* @__PURE__ */ jsx(ThreadListNew, {}),
    /* @__PURE__ */ jsx(ThreadListItems, {})
  ] });
};
var ThreadListRoot = withDefaults("div", {
  className: "aui-root aui-thread-list-root"
});
ThreadListRoot.displayName = "ThreadListRoot";
var ThreadListNew = forwardRef((props, ref) => {
  const config = useThreadConfig();
  const label = config.strings?.threadList?.new?.label ?? "New Thread";
  return /* @__PURE__ */ jsx(ThreadListPrimitive.New, { asChild: true, children: /* @__PURE__ */ jsxs(
    Button,
    {
      ref,
      className: "aui-thread-list-new",
      variant: "ghost",
      ...props,
      children: [
        /* @__PURE__ */ jsx(PlusIcon, {}),
        label
      ]
    }
  ) });
});
ThreadListNew.displayName = "ThreadListNew";
var ThreadListItems = ({ components }) => {
  return /* @__PURE__ */ jsx(
    ThreadListPrimitive.Items,
    {
      components: {
        ...components,
        ThreadListItem: components?.ThreadListItem ?? ThreadListItem
      }
    }
  );
};
ThreadListItems.displayName = "ThreadListItems";
var exports = {
  Root: ThreadListRoot,
  New: ThreadListNew,
  Items: ThreadListItems
};
var thread_list_default = Object.assign(ThreadList, exports);
export {
  thread_list_default as default
};
//# sourceMappingURL=thread-list.mjs.map