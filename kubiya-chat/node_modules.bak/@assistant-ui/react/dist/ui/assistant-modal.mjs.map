{"version":3,"sources":["../../src/ui/assistant-modal.tsx"],"sourcesContent":["\"use client\";\n\nimport { type FC, forwardRef } from \"react\";\nimport { BotIcon, ChevronDownIcon } from \"lucide-react\";\n\nimport { AssistantModalPrimitive } from \"../primitives\";\nimport Thread from \"./thread\";\nimport { withDefaults } from \"./utils/withDefaults\";\nimport { TooltipIconButton } from \"./base/tooltip-icon-button\";\nimport {\n  ThreadConfig,\n  ThreadConfigProvider,\n  ThreadConfigProviderProps,\n  useThreadConfig,\n} from \"./thread-config\";\n\nconst AssistantModal: FC<ThreadConfig> = (config) => {\n  return (\n    <AssistantModalRoot config={config}>\n      <AssistantModalTrigger />\n      <AssistantModalContent>\n        <Thread />\n      </AssistantModalContent>\n    </AssistantModalRoot>\n  );\n};\n\nAssistantModal.displayName = \"AssistantModal\";\n\nnamespace AssistantModalRoot {\n  export type Props = AssistantModalPrimitive.Root.Props &\n    ThreadConfigProviderProps;\n}\n\nconst AssistantModalRoot: FC<AssistantModalRoot.Props> = ({\n  config,\n  ...props\n}) => {\n  return (\n    <ThreadConfigProvider config={config}>\n      <AssistantModalPrimitive.Root {...props} />\n    </ThreadConfigProvider>\n  );\n};\n\nAssistantModalRoot.displayName = \"AssistantModalRoot\";\n\nnamespace AssistantModalTrigger {\n  export type Element = HTMLButtonElement;\n  export type Props = Partial<TooltipIconButton.Props>;\n}\n\nconst AssistantModalTrigger = forwardRef<\n  AssistantModalTrigger.Element,\n  AssistantModalTrigger.Props\n>((props, ref) => {\n  return (\n    <AssistantModalAnchor>\n      <AssistantModalPrimitive.Trigger asChild>\n        <AssistantModalButton {...props} ref={ref} />\n      </AssistantModalPrimitive.Trigger>\n    </AssistantModalAnchor>\n  );\n});\n\nAssistantModalTrigger.displayName = \"AssistantModalTrigger\";\n\nconst AssistantModalAnchor = withDefaults(AssistantModalPrimitive.Anchor, {\n  className: \"aui-root aui-modal-anchor\",\n});\n\nAssistantModalAnchor.displayName = \"AssistantModalAnchor\";\n\nconst ModalButtonStyled = withDefaults(TooltipIconButton, {\n  variant: \"default\",\n  className: \"aui-modal-button\",\n});\n\nnamespace AssistantModalButton {\n  export type Element = HTMLButtonElement;\n  export type Props = Partial<TooltipIconButton.Props> & {\n    \"data-state\"?: \"open\" | \"closed\";\n  };\n}\n\nconst AssistantModalButton = forwardRef<\n  AssistantModalButton.Element,\n  AssistantModalButton.Props\n>(({ \"data-state\": state, ...rest }, ref) => {\n  const {\n    strings: {\n      assistantModal: {\n        open: {\n          button: { tooltip: openTooltip = \"Close Assistant\" } = {},\n        } = {},\n        closed: {\n          button: { tooltip: closedTooltip = \"Open Assistant\" } = {},\n        } = {},\n      } = {},\n    } = {},\n  } = useThreadConfig();\n  const tooltip = state === \"open\" ? openTooltip : closedTooltip;\n\n  return (\n    <ModalButtonStyled\n      side=\"left\"\n      tooltip={tooltip}\n      data-state={state}\n      {...rest}\n      ref={ref}\n    >\n      {rest.children ?? (\n        <>\n          <BotIcon\n            data-state={state}\n            className=\"aui-modal-button-closed-icon\"\n          />\n          <ChevronDownIcon\n            data-state={state}\n            className=\"aui-modal-button-open-icon\"\n          />\n        </>\n      )}\n    </ModalButtonStyled>\n  );\n});\n\nAssistantModalButton.displayName = \"AssistantModalButton\";\n\nconst AssistantModalContent = withDefaults(AssistantModalPrimitive.Content, {\n  className: \"aui-root aui-modal-content\",\n  sideOffset: 16,\n});\n\nAssistantModalContent.displayName = \"AssistantModalContent\";\n\nconst exports = {\n  Root: AssistantModalRoot,\n  Trigger: AssistantModalTrigger,\n  Content: AssistantModalContent,\n  Button: AssistantModalButton,\n  Anchor: AssistantModalAnchor,\n};\n\nexport default Object.assign(AssistantModal, exports) as typeof AssistantModal &\n  typeof exports;\n"],"mappings":";;;AAEA,SAAkB,kBAAkB;AACpC,SAAS,SAAS,uBAAuB;AAEzC,SAAS,+BAA+B;AACxC,OAAO,YAAY;AACnB,SAAS,oBAAoB;AAC7B,SAAS,yBAAyB;AAClC;AAAA,EAEE;AAAA,EAEA;AAAA,OACK;AAIH,SA8FI,UA7FF,KADF;AAFJ,IAAM,iBAAmC,CAAC,WAAW;AACnD,SACE,qBAAC,sBAAmB,QAClB;AAAA,wBAAC,yBAAsB;AAAA,IACvB,oBAAC,yBACC,8BAAC,UAAO,GACV;AAAA,KACF;AAEJ;AAEA,eAAe,cAAc;AAO7B,IAAM,qBAAmD,CAAC;AAAA,EACxD;AAAA,EACA,GAAG;AACL,MAAM;AACJ,SACE,oBAAC,wBAAqB,QACpB,8BAAC,wBAAwB,MAAxB,EAA8B,GAAG,OAAO,GAC3C;AAEJ;AAEA,mBAAmB,cAAc;AAOjC,IAAM,wBAAwB,WAG5B,CAAC,OAAO,QAAQ;AAChB,SACE,oBAAC,wBACC,8BAAC,wBAAwB,SAAxB,EAAgC,SAAO,MACtC,8BAAC,wBAAsB,GAAG,OAAO,KAAU,GAC7C,GACF;AAEJ,CAAC;AAED,sBAAsB,cAAc;AAEpC,IAAM,uBAAuB,aAAa,wBAAwB,QAAQ;AAAA,EACxE,WAAW;AACb,CAAC;AAED,qBAAqB,cAAc;AAEnC,IAAM,oBAAoB,aAAa,mBAAmB;AAAA,EACxD,SAAS;AAAA,EACT,WAAW;AACb,CAAC;AASD,IAAM,uBAAuB,WAG3B,CAAC,EAAE,cAAc,OAAO,GAAG,KAAK,GAAG,QAAQ;AAC3C,QAAM;AAAA,IACJ,SAAS;AAAA,MACP,gBAAgB;AAAA,QACd,MAAM;AAAA,UACJ,QAAQ,EAAE,SAAS,cAAc,kBAAkB,IAAI,CAAC;AAAA,QAC1D,IAAI,CAAC;AAAA,QACL,QAAQ;AAAA,UACN,QAAQ,EAAE,SAAS,gBAAgB,iBAAiB,IAAI,CAAC;AAAA,QAC3D,IAAI,CAAC;AAAA,MACP,IAAI,CAAC;AAAA,IACP,IAAI,CAAC;AAAA,EACP,IAAI,gBAAgB;AACpB,QAAM,UAAU,UAAU,SAAS,cAAc;AAEjD,SACE;AAAA,IAAC;AAAA;AAAA,MACC,MAAK;AAAA,MACL;AAAA,MACA,cAAY;AAAA,MACX,GAAG;AAAA,MACJ;AAAA,MAEC,eAAK,YACJ,iCACE;AAAA;AAAA,UAAC;AAAA;AAAA,YACC,cAAY;AAAA,YACZ,WAAU;AAAA;AAAA,QACZ;AAAA,QACA;AAAA,UAAC;AAAA;AAAA,YACC,cAAY;AAAA,YACZ,WAAU;AAAA;AAAA,QACZ;AAAA,SACF;AAAA;AAAA,EAEJ;AAEJ,CAAC;AAED,qBAAqB,cAAc;AAEnC,IAAM,wBAAwB,aAAa,wBAAwB,SAAS;AAAA,EAC1E,WAAW;AAAA,EACX,YAAY;AACd,CAAC;AAED,sBAAsB,cAAc;AAEpC,IAAM,UAAU;AAAA,EACd,MAAM;AAAA,EACN,SAAS;AAAA,EACT,SAAS;AAAA,EACT,QAAQ;AAAA,EACR,QAAQ;AACV;AAEA,IAAO,0BAAQ,OAAO,OAAO,gBAAgB,OAAO;","names":[]}