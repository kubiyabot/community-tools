{"version":3,"sources":["../../src/ui/thread-welcome.tsx"],"sourcesContent":["\"use client\";\n\nimport { ComponentPropsWithoutRef, forwardRef, type FC } from \"react\";\nimport { withDefaults } from \"./utils/withDefaults\";\nimport { Avatar } from \"./base/avatar\";\nimport { SuggestionConfig, useThreadConfig } from \"./thread-config\";\nimport { ThreadPrimitive } from \"../primitives\";\nimport { useThread } from \"../context\";\n\nconst ThreadWelcome: FC = () => {\n  return (\n    <ThreadWelcomeRoot>\n      <ThreadWelcomeCenter>\n        <ThreadWelcomeAvatar />\n        <ThreadWelcomeMessage />\n      </ThreadWelcomeCenter>\n      <ThreadWelcomeSuggestions />\n    </ThreadWelcomeRoot>\n  );\n};\n\nThreadWelcome.displayName = \"ThreadWelcome\";\n\nconst ThreadWelcomeRootStyled = withDefaults(\"div\", {\n  className: \"aui-thread-welcome-root\",\n});\n\nconst ThreadWelcomeCenter = withDefaults(\"div\", {\n  className: \"aui-thread-welcome-center\",\n});\n\nnamespace ThreadWelcomeRoot {\n  export type Element = HTMLDivElement;\n  export type Props = ComponentPropsWithoutRef<\"div\">;\n}\n\nconst ThreadWelcomeRoot = forwardRef<\n  ThreadWelcomeRoot.Element,\n  ThreadWelcomeRoot.Props\n>((props, ref) => {\n  return (\n    <ThreadPrimitive.Empty>\n      <ThreadWelcomeRootStyled {...props} ref={ref} />\n    </ThreadPrimitive.Empty>\n  );\n});\n\nThreadWelcomeRoot.displayName = \"ThreadWelcomeRoot\";\n\nconst ThreadWelcomeAvatar: FC = () => {\n  const { assistantAvatar: avatar = { fallback: \"A\" } } = useThreadConfig();\n  return <Avatar {...avatar} />;\n};\n\nconst ThreadWelcomeMessageStyled = withDefaults(\"p\", {\n  className: \"aui-thread-welcome-message\",\n});\n\nnamespace ThreadWelcomeMessage {\n  export type Element = HTMLParagraphElement;\n  export type Props = Omit<\n    ComponentPropsWithoutRef<typeof ThreadWelcomeMessageStyled>,\n    \"children\"\n  > & { message?: string | undefined };\n}\n\nconst ThreadWelcomeMessage = forwardRef<\n  ThreadWelcomeMessage.Element,\n  ThreadWelcomeMessage.Props\n>(({ message: messageProp, ...rest }, ref) => {\n  const {\n    welcome: { message } = {},\n    strings: {\n      welcome: { message: defaultMessage = \"How can I help you today?\" } = {},\n    } = {},\n  } = useThreadConfig();\n  return (\n    <ThreadWelcomeMessageStyled {...rest} ref={ref}>\n      {messageProp ?? message ?? defaultMessage}\n    </ThreadWelcomeMessageStyled>\n  );\n});\n\nThreadWelcomeMessage.displayName = \"ThreadWelcomeMessage\";\n\nconst ThreadWelcomeSuggestionContainer = withDefaults(\"div\", {\n  className: \"aui-thread-welcome-suggestion-container\",\n});\n\nconst ThreadWelcomeSuggestionStyled = withDefaults(ThreadPrimitive.Suggestion, {\n  className: \"aui-thread-welcome-suggestion\",\n});\n\nexport namespace ThreadWelcomeSuggestion {\n  export type Props = {\n    suggestion: SuggestionConfig;\n  };\n}\n\nconst ThreadWelcomeSuggestion: FC<ThreadWelcomeSuggestion.Props> = ({\n  suggestion: { text, prompt },\n}) => {\n  return (\n    <ThreadWelcomeSuggestionStyled prompt={prompt} method=\"replace\" autoSend>\n      <span className=\"aui-thread-welcome-suggestion-text\">\n        {text ?? prompt}\n      </span>\n    </ThreadWelcomeSuggestionStyled>\n  );\n};\n\nconst ThreadWelcomeSuggestions: FC = () => {\n  const suggestions2 = useThread((t) => t.suggestions);\n  const { welcome: { suggestions } = {} } = useThreadConfig();\n\n  const finalSuggestions = suggestions2.length ? suggestions2 : suggestions;\n\n  return (\n    <ThreadWelcomeSuggestionContainer>\n      {finalSuggestions?.map((suggestion, idx) => {\n        const key = `${suggestion.prompt}-${idx}`;\n        return <ThreadWelcomeSuggestion key={key} suggestion={suggestion} />;\n      })}\n    </ThreadWelcomeSuggestionContainer>\n  );\n};\n\nThreadWelcomeSuggestions.displayName = \"ThreadWelcomeSuggestions\";\n\nconst exports = {\n  Root: ThreadWelcomeRoot,\n  Center: ThreadWelcomeCenter,\n  Avatar: ThreadWelcomeAvatar,\n  Message: ThreadWelcomeMessage,\n  Suggestions: ThreadWelcomeSuggestions,\n  Suggestion: ThreadWelcomeSuggestion,\n};\n\nexport default Object.assign(ThreadWelcome, exports) as typeof ThreadWelcome &\n  typeof exports;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,mBAA8D;AAC9D,0BAA6B;AAC7B,oBAAuB;AACvB,2BAAkD;AAClD,wBAAgC;AAChC,qBAA0B;AAKpB;AAHN,IAAM,gBAAoB,MAAM;AAC9B,SACE,6CAAC,qBACC;AAAA,iDAAC,uBACC;AAAA,kDAAC,uBAAoB;AAAA,MACrB,4CAAC,wBAAqB;AAAA,OACxB;AAAA,IACA,4CAAC,4BAAyB;AAAA,KAC5B;AAEJ;AAEA,cAAc,cAAc;AAE5B,IAAM,8BAA0B,kCAAa,OAAO;AAAA,EAClD,WAAW;AACb,CAAC;AAED,IAAM,0BAAsB,kCAAa,OAAO;AAAA,EAC9C,WAAW;AACb,CAAC;AAOD,IAAM,wBAAoB,yBAGxB,CAAC,OAAO,QAAQ;AAChB,SACE,4CAAC,kCAAgB,OAAhB,EACC,sDAAC,2BAAyB,GAAG,OAAO,KAAU,GAChD;AAEJ,CAAC;AAED,kBAAkB,cAAc;AAEhC,IAAM,sBAA0B,MAAM;AACpC,QAAM,EAAE,iBAAiB,SAAS,EAAE,UAAU,IAAI,EAAE,QAAI,sCAAgB;AACxE,SAAO,4CAAC,wBAAQ,GAAG,QAAQ;AAC7B;AAEA,IAAM,iCAA6B,kCAAa,KAAK;AAAA,EACnD,WAAW;AACb,CAAC;AAUD,IAAM,2BAAuB,yBAG3B,CAAC,EAAE,SAAS,aAAa,GAAG,KAAK,GAAG,QAAQ;AAC5C,QAAM;AAAA,IACJ,SAAS,EAAE,QAAQ,IAAI,CAAC;AAAA,IACxB,SAAS;AAAA,MACP,SAAS,EAAE,SAAS,iBAAiB,4BAA4B,IAAI,CAAC;AAAA,IACxE,IAAI,CAAC;AAAA,EACP,QAAI,sCAAgB;AACpB,SACE,4CAAC,8BAA4B,GAAG,MAAM,KACnC,yBAAe,WAAW,gBAC7B;AAEJ,CAAC;AAED,qBAAqB,cAAc;AAEnC,IAAM,uCAAmC,kCAAa,OAAO;AAAA,EAC3D,WAAW;AACb,CAAC;AAED,IAAM,oCAAgC,kCAAa,kCAAgB,YAAY;AAAA,EAC7E,WAAW;AACb,CAAC;AAQD,IAAM,0BAA6D,CAAC;AAAA,EAClE,YAAY,EAAE,MAAM,OAAO;AAC7B,MAAM;AACJ,SACE,4CAAC,iCAA8B,QAAgB,QAAO,WAAU,UAAQ,MACtE,sDAAC,UAAK,WAAU,sCACb,kBAAQ,QACX,GACF;AAEJ;AAEA,IAAM,2BAA+B,MAAM;AACzC,QAAM,mBAAe,0BAAU,CAAC,MAAM,EAAE,WAAW;AACnD,QAAM,EAAE,SAAS,EAAE,YAAY,IAAI,CAAC,EAAE,QAAI,sCAAgB;AAE1D,QAAM,mBAAmB,aAAa,SAAS,eAAe;AAE9D,SACE,4CAAC,oCACE,4BAAkB,IAAI,CAAC,YAAY,QAAQ;AAC1C,UAAM,MAAM,GAAG,WAAW,MAAM,IAAI,GAAG;AACvC,WAAO,4CAAC,2BAAkC,cAAL,GAA6B;AAAA,EACpE,CAAC,GACH;AAEJ;AAEA,yBAAyB,cAAc;AAEvC,IAAMA,WAAU;AAAA,EACd,MAAM;AAAA,EACN,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,SAAS;AAAA,EACT,aAAa;AAAA,EACb,YAAY;AACd;AAEA,IAAO,yBAAQ,OAAO,OAAO,eAAeA,QAAO;","names":["exports"]}