import { type VariantProps } from "class-variance-authority";
import { Primitive } from "@radix-ui/react-primitive";
import { ComponentPropsWithoutRef } from "react";
declare const buttonVariants: (props?: ({
    variant?: "default" | "outline" | "ghost" | null | undefined;
    size?: "default" | "icon" | null | undefined;
} & import("class-variance-authority/types").ClassProp) | undefined) => string;
export type ButtonProps = ComponentPropsWithoutRef<typeof Primitive.button> & VariantProps<typeof buttonVariants>;
declare const Button: import("react").ForwardRefExoticComponent<Omit<import("react").ClassAttributes<HTMLButtonElement> & import("react").ButtonHTMLAttributes<HTMLButtonElement> & {
    asChild?: boolean;
}, "ref"> & VariantProps<(props?: ({
    variant?: "default" | "outline" | "ghost" | null | undefined;
    size?: "default" | "icon" | null | undefined;
} & import("class-variance-authority/types").ClassProp) | undefined) => string> & import("react").RefAttributes<HTMLButtonElement>>;
export { Button, buttonVariants };
//# sourceMappingURL=button.d.ts.map