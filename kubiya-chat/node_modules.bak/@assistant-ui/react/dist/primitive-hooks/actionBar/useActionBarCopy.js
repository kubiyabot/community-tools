"use strict";
"use client";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/primitive-hooks/actionBar/useActionBarCopy.tsx
var useActionBarCopy_exports = {};
__export(useActionBarCopy_exports, {
  useActionBarCopy: () => useActionBarCopy
});
module.exports = __toCommonJS(useActionBarCopy_exports);
var import_react = require("react");
var import_MessageContext = require("../../context/react/MessageContext.js");
var import_context = require("../../context/index.js");
var useActionBarCopy = ({
  copiedDuration = 3e3
} = {}) => {
  const messageRuntime = (0, import_MessageContext.useMessageRuntime)();
  const composerRuntime = (0, import_context.useComposerRuntime)();
  const setIsCopied = (0, import_MessageContext.useMessageUtils)((s) => s.setIsCopied);
  const hasCopyableContent = (0, import_MessageContext.useMessage)((message) => {
    return (message.role !== "assistant" || message.status.type !== "running") && message.content.some((c) => c.type === "text" && c.text.length > 0);
  });
  const callback = (0, import_react.useCallback)(() => {
    const { isEditing, text: composerValue } = composerRuntime.getState();
    const valueToCopy = isEditing ? composerValue : messageRuntime.unstable_getCopyText();
    navigator.clipboard.writeText(valueToCopy).then(() => {
      setIsCopied(true);
      setTimeout(() => setIsCopied(false), copiedDuration);
    });
  }, [messageRuntime, setIsCopied, composerRuntime, copiedDuration]);
  if (!hasCopyableContent) return null;
  return callback;
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  useActionBarCopy
});
//# sourceMappingURL=useActionBarCopy.js.map