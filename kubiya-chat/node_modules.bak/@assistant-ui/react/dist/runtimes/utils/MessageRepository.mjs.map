{"version":3,"sources":["../../../src/runtimes/utils/MessageRepository.tsx"],"sourcesContent":["import type { CoreMessage, ThreadMessage } from \"../../types/AssistantTypes\";\nimport { generateOptimisticId } from \"../../utils/idUtils\";\nimport { fromCoreMessage } from \"../edge/converters/fromCoreMessage\";\n\ntype RepositoryParent = {\n  children: string[];\n  next: RepositoryMessage | null;\n};\n\ntype RepositoryMessage = RepositoryParent & {\n  prev: RepositoryMessage | null;\n  current: ThreadMessage;\n  level: number;\n};\n\nexport interface ExportedMessageRepository {\n  headId?: string | null;\n  messages: Array<{\n    message: ThreadMessage;\n    parentId: string | null;\n  }>;\n}\n\nconst findHead = (\n  message: RepositoryMessage | RepositoryParent,\n): RepositoryMessage | null => {\n  if (message.next) return findHead(message.next);\n  if (\"current\" in message) return message;\n  return null;\n};\n\nexport class MessageRepository {\n  private messages = new Map<string, RepositoryMessage>(); // message_id -> item\n  private head: RepositoryMessage | null = null;\n  private root: RepositoryParent = {\n    children: [],\n    next: null,\n  };\n\n  private performOp(\n    newParent: RepositoryMessage | null,\n    child: RepositoryMessage,\n    operation: \"cut\" | \"link\" | \"relink\",\n  ) {\n    const parentOrRoot = child.prev ?? this.root;\n    const newParentOrRoot = newParent ?? this.root;\n\n    if (operation === \"relink\" && parentOrRoot === newParentOrRoot) return;\n\n    // cut\n    if (operation !== \"link\") {\n      // remove from parentOrRoot.children\n      parentOrRoot.children = parentOrRoot.children.filter(\n        (m) => m !== child.current.id,\n      );\n\n      // update parentOrRoot.next\n      if (parentOrRoot.next === child) {\n        const fallbackId = parentOrRoot.children.at(-1);\n        const fallback = fallbackId ? this.messages.get(fallbackId) : null;\n        if (fallback === undefined) {\n          throw new Error(\n            \"MessageRepository(performOp/cut): Fallback sibling message not found. This is likely an internal bug in assistant-ui.\",\n          );\n        }\n        parentOrRoot.next = fallback;\n      }\n    }\n\n    // link\n    if (operation !== \"cut\") {\n      // ensure the child is not part of parent tree\n      for (\n        let current: RepositoryMessage | null = newParent;\n        current;\n        current = current.prev\n      ) {\n        if (current.current.id === child.current.id) {\n          throw new Error(\n            \"MessageRepository(performOp/link): A message with the same id already exists in the parent tree. This error occurs if the same message id is found multiple times. This is likely an internal bug in assistant-ui.\",\n          );\n        }\n      }\n\n      // add to parentOrRoot.children\n      newParentOrRoot.children = [\n        ...newParentOrRoot.children,\n        child.current.id,\n      ];\n\n      // update parentOrRoot.next\n      if (findHead(child) === this.head || newParentOrRoot.next === null) {\n        newParentOrRoot.next = child;\n      }\n\n      child.prev = newParent;\n    }\n  }\n  getMessages() {\n    const messages = new Array<ThreadMessage>(this.head?.level ?? 0);\n    for (let current = this.head; current; current = current.prev) {\n      messages[current.level] = current.current;\n    }\n    return messages;\n  }\n\n  addOrUpdateMessage(parentId: string | null, message: ThreadMessage) {\n    const existingItem = this.messages.get(message.id);\n    const prev = parentId ? this.messages.get(parentId) : null;\n    if (prev === undefined)\n      throw new Error(\n        \"MessageRepository(addOrUpdateMessage): Parent message not found. This is likely an internal bug in assistant-ui.\",\n      );\n\n    // update existing message\n    if (existingItem) {\n      existingItem.current = message;\n      this.performOp(prev, existingItem, \"relink\");\n      return;\n    }\n\n    // create a new message\n    const newItem: RepositoryMessage = {\n      prev,\n      current: message,\n      next: null,\n      children: [],\n      level: prev ? prev.level + 1 : 0,\n    };\n\n    this.messages.set(message.id, newItem);\n    this.performOp(prev, newItem, \"link\");\n\n    if (this.head === prev) {\n      this.head = newItem;\n    }\n  }\n\n  getMessage(messageId: string) {\n    const message = this.messages.get(messageId);\n    if (!message)\n      throw new Error(\n        \"MessageRepository(updateMessage): Message not found. This is likely an internal bug in assistant-ui.\",\n      );\n\n    return {\n      parentId: message.prev?.current.id ?? null,\n      message: message.current,\n    };\n  }\n\n  appendOptimisticMessage(parentId: string | null, message: CoreMessage) {\n    let optimisticId: string;\n    do {\n      optimisticId = generateOptimisticId();\n    } while (this.messages.has(optimisticId));\n\n    this.addOrUpdateMessage(\n      parentId,\n      fromCoreMessage(message, {\n        id: optimisticId,\n        status: { type: \"running\" },\n      }),\n    );\n\n    return optimisticId;\n  }\n\n  deleteMessage(messageId: string, replacementId?: string | null | undefined) {\n    const message = this.messages.get(messageId);\n\n    if (!message)\n      throw new Error(\n        \"MessageRepository(deleteMessage): Optimistic message not found. This is likely an internal bug in assistant-ui.\",\n      );\n\n    const replacement =\n      replacementId === undefined\n        ? message.prev // if no replacementId is provided, use the parent\n        : replacementId === null\n          ? null\n          : this.messages.get(replacementId);\n    if (replacement === undefined)\n      throw new Error(\n        \"MessageRepository(deleteMessage): Replacement not found. This is likely an internal bug in assistant-ui.\",\n      );\n\n    for (const child of message.children) {\n      const childMessage = this.messages.get(child);\n      if (!childMessage)\n        throw new Error(\n          \"MessageRepository(deleteMessage): Child message not found. This is likely an internal bug in assistant-ui.\",\n        );\n      this.performOp(replacement, childMessage, \"relink\");\n    }\n\n    this.performOp(null, message, \"cut\");\n    this.messages.delete(messageId);\n\n    if (this.head === message) {\n      this.head = findHead(replacement ?? this.root);\n    }\n  }\n\n  getBranches(messageId: string) {\n    const message = this.messages.get(messageId);\n    if (!message)\n      throw new Error(\n        \"MessageRepository(getBranches): Message not found. This is likely an internal bug in assistant-ui.\",\n      );\n\n    const { children } = message.prev ?? this.root;\n    return children;\n  }\n\n  switchToBranch(messageId: string) {\n    const message = this.messages.get(messageId);\n    if (!message)\n      throw new Error(\n        \"MessageRepository(switchToBranch): Branch not found. This is likely an internal bug in assistant-ui.\",\n      );\n\n    const prevOrRoot = message.prev ?? this.root;\n    prevOrRoot.next = message;\n\n    this.head = findHead(message);\n  }\n\n  resetHead(messageId: string | null) {\n    if (messageId === null) {\n      this.head = null;\n      return;\n    }\n\n    const message = this.messages.get(messageId);\n    if (!message)\n      throw new Error(\n        \"MessageRepository(resetHead): Branch not found. This is likely an internal bug in assistant-ui.\",\n      );\n\n    this.head = message;\n    for (\n      let current: RepositoryMessage | null = message;\n      current;\n      current = current.prev\n    ) {\n      if (current.prev) {\n        current.prev.next = current;\n      }\n    }\n  }\n\n  export(): ExportedMessageRepository {\n    const exportItems: ExportedMessageRepository[\"messages\"] = [];\n\n    // hint: we are relying on the insertion order of the messages\n    // this is important for the import function to properly link the messages\n    for (const [, message] of this.messages) {\n      exportItems.push({\n        message: message.current,\n        parentId: message.prev?.current.id ?? null,\n      });\n    }\n\n    return {\n      headId: this.head?.current.id ?? null,\n      messages: exportItems,\n    };\n  }\n\n  import({ headId, messages }: ExportedMessageRepository) {\n    for (const { message, parentId } of messages) {\n      this.addOrUpdateMessage(parentId, message);\n    }\n\n    // switch to the saved head id if it is not the most recent message\n    this.resetHead(headId ?? messages.at(-1)?.message.id ?? null);\n  }\n}\n"],"mappings":"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","names":[]}