import type { Unsubscribe } from "../../types";
import { ThreadListRuntimeCore } from "../core/ThreadListRuntimeCore";
import { LocalThreadRuntimeCore } from "./LocalThreadRuntimeCore";
export type ThreadListAdapter = {
    subscribe(callback: () => void): Unsubscribe;
};
export type LocalThreadData = {
    readonly runtime: LocalThreadRuntimeCore;
    readonly status: "new" | "regular" | "archived";
    readonly threadId: string;
    readonly title?: string | undefined;
};
export type LocalThreadFactory = () => LocalThreadRuntimeCore;
export declare class LocalThreadListRuntimeCore implements ThreadListRuntimeCore {
    private _threadFactory;
    private _threadData;
    private _threadIds;
    private _archivedThreadIds;
    private _newThreadId;
    get newThreadId(): string | undefined;
    get threadIds(): readonly string[];
    get archivedThreadIds(): readonly string[];
    private _mainThreadId;
    get mainThreadId(): string;
    constructor(_threadFactory: LocalThreadFactory);
    getMainThreadRuntimeCore(): LocalThreadRuntimeCore;
    getLoadThreadsPromise(): Promise<void>;
    getItemById(threadId: string): LocalThreadData | undefined;
    switchToThread(threadId: string): Promise<void>;
    switchToNewThread(): Promise<void>;
    private _stateOp;
    rename(threadId: string, newTitle: string): Promise<void>;
    archive(threadId: string): Promise<void>;
    unarchive(threadId: string): Promise<void>;
    delete(threadId: string): Promise<void>;
    private _subscriptions;
    subscribe(callback: () => void): Unsubscribe;
    private _notifySubscribers;
}
//# sourceMappingURL=LocalThreadListRuntimeCore.d.ts.map