{"version":3,"sources":["../../../src/runtimes/local/LocalRuntimeCore.tsx"],"sourcesContent":["import type { CoreMessage } from \"../../types/AssistantTypes\";\nimport { BaseAssistantRuntimeCore } from \"../core/BaseAssistantRuntimeCore\";\nimport { LocalThreadRuntimeCore } from \"./LocalThreadRuntimeCore\";\nimport { LocalRuntimeOptionsBase } from \"./LocalRuntimeOptions\";\nimport { LocalThreadListRuntimeCore } from \"./LocalThreadListRuntimeCore\";\nimport { ExportedMessageRepository } from \"../utils/MessageRepository\";\nimport { ThreadMessageLike } from \"../external-store\";\nimport { fromThreadMessageLike } from \"../external-store/ThreadMessageLike\";\nimport { generateId } from \"../../internal\";\nimport { getAutoStatus } from \"../external-store/auto-status\";\n\nconst getExportFromInitialMessages = (\n  initialMessages: readonly ThreadMessageLike[],\n): ExportedMessageRepository => {\n  const messages = initialMessages.map((i, idx) => {\n    const isLast = idx === initialMessages.length - 1;\n    return fromThreadMessageLike(i, generateId(), getAutoStatus(isLast, false));\n  });\n  return {\n    messages: messages.map((m, idx) => ({\n      parentId: messages[idx - 1]?.id ?? null,\n      message: m,\n    })),\n  };\n};\n\nexport class LocalRuntimeCore extends BaseAssistantRuntimeCore {\n  public readonly threadList;\n  public readonly Provider = undefined;\n\n  private _options: LocalRuntimeOptionsBase;\n\n  constructor(\n    options: LocalRuntimeOptionsBase,\n    initialMessages: readonly ThreadMessageLike[] | undefined,\n  ) {\n    super();\n\n    this._options = options;\n\n    this.threadList = new LocalThreadListRuntimeCore(() => {\n      return new LocalThreadRuntimeCore(\n        this._proxyConfigProvider,\n        this._options,\n      );\n    });\n\n    if (initialMessages) {\n      this.threadList\n        .getMainThreadRuntimeCore()\n        .import(getExportFromInitialMessages(initialMessages));\n    }\n  }\n\n  public reset({\n    initialMessages,\n  }: {\n    initialMessages?: readonly CoreMessage[] | undefined;\n  } = {}) {\n    this.threadList.switchToNewThread();\n    if (!initialMessages) return;\n\n    this.threadList\n      .getMainThreadRuntimeCore()\n      .import(getExportFromInitialMessages(initialMessages));\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,sCAAyC;AACzC,oCAAuC;AAEvC,wCAA2C;AAG3C,+BAAsC;AACtC,sBAA2B;AAC3B,yBAA8B;AAE9B,IAAM,+BAA+B,CACnC,oBAC8B;AAC9B,QAAM,WAAW,gBAAgB,IAAI,CAAC,GAAG,QAAQ;AAC/C,UAAM,SAAS,QAAQ,gBAAgB,SAAS;AAChD,eAAO,gDAAsB,OAAG,4BAAW,OAAG,kCAAc,QAAQ,KAAK,CAAC;AAAA,EAC5E,CAAC;AACD,SAAO;AAAA,IACL,UAAU,SAAS,IAAI,CAAC,GAAG,SAAS;AAAA,MAClC,UAAU,SAAS,MAAM,CAAC,GAAG,MAAM;AAAA,MACnC,SAAS;AAAA,IACX,EAAE;AAAA,EACJ;AACF;AAEO,IAAM,mBAAN,cAA+B,yDAAyB;AAAA,EAC7C;AAAA,EACA,WAAW;AAAA,EAEnB;AAAA,EAER,YACE,SACA,iBACA;AACA,UAAM;AAEN,SAAK,WAAW;AAEhB,SAAK,aAAa,IAAI,6DAA2B,MAAM;AACrD,aAAO,IAAI;AAAA,QACT,KAAK;AAAA,QACL,KAAK;AAAA,MACP;AAAA,IACF,CAAC;AAED,QAAI,iBAAiB;AACnB,WAAK,WACF,yBAAyB,EACzB,OAAO,6BAA6B,eAAe,CAAC;AAAA,IACzD;AAAA,EACF;AAAA,EAEO,MAAM;AAAA,IACX;AAAA,EACF,IAEI,CAAC,GAAG;AACN,SAAK,WAAW,kBAAkB;AAClC,QAAI,CAAC,gBAAiB;AAEtB,SAAK,WACF,yBAAyB,EACzB,OAAO,6BAA6B,eAAe,CAAC;AAAA,EACzD;AACF;","names":[]}