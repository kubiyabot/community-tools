"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/runtimes/local/LocalThreadListRuntimeCore.tsx
var LocalThreadListRuntimeCore_exports = {};
__export(LocalThreadListRuntimeCore_exports, {
  LocalThreadListRuntimeCore: () => LocalThreadListRuntimeCore
});
module.exports = __toCommonJS(LocalThreadListRuntimeCore_exports);
var import_idUtils = require("../../utils/idUtils.js");
var RESOLVED_PROMISE = Promise.resolve();
var LocalThreadListRuntimeCore = class {
  constructor(_threadFactory) {
    this._threadFactory = _threadFactory;
    this.switchToNewThread();
  }
  _threadData = /* @__PURE__ */ new Map();
  _threadIds = [];
  _archivedThreadIds = [];
  _newThreadId;
  get newThreadId() {
    return this._newThreadId;
  }
  get threadIds() {
    return this._threadIds;
  }
  get archivedThreadIds() {
    return this._archivedThreadIds;
  }
  _mainThreadId;
  get mainThreadId() {
    return this._mainThreadId;
  }
  getMainThreadRuntimeCore() {
    const result = this._threadData.get(this._mainThreadId)?.runtime;
    if (!result)
      throw new Error("Main thread not found. This is a bug in assistant-ui.");
    return result;
  }
  getLoadThreadsPromise() {
    return RESOLVED_PROMISE;
  }
  getItemById(threadId) {
    return this._threadData.get(threadId);
  }
  async switchToThread(threadId) {
    if (this._mainThreadId === threadId) return;
    const data = this._threadData.get(threadId);
    if (!data) throw new Error("Thread not found");
    if (data.status === "archived") await this.unarchive(threadId);
    this._mainThreadId = data.threadId;
    this._notifySubscribers();
  }
  switchToNewThread() {
    if (this._newThreadId === void 0) {
      let threadId;
      do {
        threadId = (0, import_idUtils.generateId)();
      } while (this._threadData.has(threadId));
      const runtime = this._threadFactory();
      const dispose = runtime.unstable_on("initialize", () => {
        dispose();
        const data = this._threadData.get(threadId);
        if (!data) throw new Error("Thread not found");
        this._stateOp(threadId, "regular");
      });
      this._threadData.set(threadId, {
        runtime,
        status: "new",
        threadId
      });
      this._newThreadId = threadId;
    }
    this.switchToThread(this._newThreadId);
    return Promise.resolve();
  }
  async _stateOp(threadId, newState) {
    const data = this._threadData.get(threadId);
    if (!data) throw new Error("Thread not found");
    const { status: lastState } = data;
    if (lastState === newState) return;
    switch (lastState) {
      case "new":
        this._newThreadId = void 0;
        break;
      case "regular":
        this._threadIds = this._threadIds.filter((t) => t !== threadId);
        break;
      case "archived":
        this._archivedThreadIds = this._archivedThreadIds.filter(
          (t) => t !== threadId
        );
        break;
      default: {
        const _exhaustiveCheck = lastState;
        throw new Error(`Unsupported state: ${_exhaustiveCheck}`);
      }
    }
    switch (newState) {
      case "regular":
        this._threadIds = [...this._threadIds, data.threadId];
        break;
      case "archived":
        this._archivedThreadIds = [...this._archivedThreadIds, data.threadId];
        break;
      case "deleted":
        this._threadData.delete(threadId);
        break;
      default: {
        const _exhaustiveCheck = newState;
        throw new Error(`Unsupported state: ${_exhaustiveCheck}`);
      }
    }
    if (newState !== "deleted") {
      this._threadData.set(threadId, {
        ...data,
        status: newState
      });
    }
    if (threadId === this._mainThreadId && (newState === "archived" || newState === "deleted")) {
      const lastThreadId = this._threadIds[0];
      if (lastThreadId) {
        await this.switchToThread(lastThreadId);
      } else {
        await this.switchToNewThread();
      }
    } else {
      this._notifySubscribers();
    }
  }
  rename(threadId, newTitle) {
    const data = this._threadData.get(threadId);
    if (!data) throw new Error("Thread not found");
    this._threadData.set(threadId, {
      ...data,
      title: newTitle
    });
    this._notifySubscribers();
    return Promise.resolve();
  }
  archive(threadId) {
    const data = this._threadData.get(threadId);
    if (!data) throw new Error("Thread not found");
    if (data.status !== "regular")
      throw new Error("Thread is not yet initialized or already archived");
    this._stateOp(threadId, "archived");
    return Promise.resolve();
  }
  unarchive(threadId) {
    const data = this._threadData.get(threadId);
    if (!data) throw new Error("Thread not found");
    if (data.status !== "archived") throw new Error("Thread is not archived");
    this._stateOp(threadId, "regular");
    return Promise.resolve();
  }
  delete(threadId) {
    const data = this._threadData.get(threadId);
    if (!data) throw new Error("Thread not found");
    if (data.status !== "regular" && data.status !== "archived")
      throw new Error("Thread is not yet initialized");
    this._stateOp(threadId, "deleted");
    return Promise.resolve();
  }
  _subscriptions = /* @__PURE__ */ new Set();
  subscribe(callback) {
    this._subscriptions.add(callback);
    return () => this._subscriptions.delete(callback);
  }
  _notifySubscribers() {
    for (const callback of this._subscriptions) callback();
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  LocalThreadListRuntimeCore
});
//# sourceMappingURL=LocalThreadListRuntimeCore.js.map