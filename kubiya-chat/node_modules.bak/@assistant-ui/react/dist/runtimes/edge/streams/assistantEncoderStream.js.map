{"version":3,"sources":["../../../../src/runtimes/edge/streams/assistantEncoderStream.ts"],"sourcesContent":["import {\n  AssistantStreamChunk,\n  AssistantStreamChunkType,\n} from \"./AssistantStreamChunkType\";\nimport { StreamPart } from \"./utils/StreamPart\";\nimport { ToolResultStreamPart } from \"./toolResultStream\";\n\nexport function assistantEncoderStream() {\n  const toolCalls = new Set<string>();\n  return new TransformStream<\n    ToolResultStreamPart,\n    StreamPart<AssistantStreamChunk>\n  >({\n    transform(chunk, controller) {\n      const chunkType = chunk.type;\n      switch (chunkType) {\n        case \"text-delta\": {\n          if (!chunk.textDelta) break; // ignore empty text deltas\n          controller.enqueue({\n            type: AssistantStreamChunkType.TextDelta,\n            value: chunk.textDelta,\n          });\n          break;\n        }\n        case \"tool-call-delta\": {\n          if (!toolCalls.has(chunk.toolCallId)) {\n            toolCalls.add(chunk.toolCallId);\n            controller.enqueue({\n              type: AssistantStreamChunkType.ToolCallBegin,\n              value: {\n                toolCallId: chunk.toolCallId,\n                toolName: chunk.toolName,\n              },\n            });\n          }\n\n          controller.enqueue({\n            type: AssistantStreamChunkType.ToolCallDelta,\n            value: {\n              toolCallId: chunk.toolCallId,\n              argsTextDelta: chunk.argsTextDelta,\n            },\n          });\n          break;\n        }\n\n        case \"data\": {\n          controller.enqueue({\n            type: AssistantStreamChunkType.Data,\n            value: chunk.data,\n          });\n          break;\n        }\n\n        // ignore\n        case \"tool-call\":\n        case \"response-metadata\":\n          break;\n\n        case \"tool-result\": {\n          controller.enqueue({\n            type: AssistantStreamChunkType.ToolCallResult,\n            value: {\n              toolCallId: chunk.toolCallId,\n              result: chunk.result,\n            },\n          });\n          break;\n        }\n\n        case \"step-finish\": {\n          const { type, ...rest } = chunk;\n          controller.enqueue({\n            type: AssistantStreamChunkType.StepFinish,\n            value: rest,\n          });\n          break;\n        }\n\n        case \"finish\": {\n          const { type, ...rest } = chunk;\n          controller.enqueue({\n            type: AssistantStreamChunkType.Finish,\n            value: rest,\n          });\n          break;\n        }\n\n        case \"error\": {\n          controller.enqueue({\n            type: AssistantStreamChunkType.Error,\n            value: chunk.error,\n          });\n          break;\n        }\n        default: {\n          const unhandledType: never = chunkType;\n          throw new Error(`Unhandled chunk type: ${unhandledType}`);\n        }\n      }\n    },\n  });\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCAGO;AAIA,SAAS,yBAAyB;AACvC,QAAM,YAAY,oBAAI,IAAY;AAClC,SAAO,IAAI,gBAGT;AAAA,IACA,UAAU,OAAO,YAAY;AAC3B,YAAM,YAAY,MAAM;AACxB,cAAQ,WAAW;AAAA,QACjB,KAAK,cAAc;AACjB,cAAI,CAAC,MAAM,UAAW;AACtB,qBAAW,QAAQ;AAAA,YACjB,MAAM,yDAAyB;AAAA,YAC/B,OAAO,MAAM;AAAA,UACf,CAAC;AACD;AAAA,QACF;AAAA,QACA,KAAK,mBAAmB;AACtB,cAAI,CAAC,UAAU,IAAI,MAAM,UAAU,GAAG;AACpC,sBAAU,IAAI,MAAM,UAAU;AAC9B,uBAAW,QAAQ;AAAA,cACjB,MAAM,yDAAyB;AAAA,cAC/B,OAAO;AAAA,gBACL,YAAY,MAAM;AAAA,gBAClB,UAAU,MAAM;AAAA,cAClB;AAAA,YACF,CAAC;AAAA,UACH;AAEA,qBAAW,QAAQ;AAAA,YACjB,MAAM,yDAAyB;AAAA,YAC/B,OAAO;AAAA,cACL,YAAY,MAAM;AAAA,cAClB,eAAe,MAAM;AAAA,YACvB;AAAA,UACF,CAAC;AACD;AAAA,QACF;AAAA,QAEA,KAAK,QAAQ;AACX,qBAAW,QAAQ;AAAA,YACjB,MAAM,yDAAyB;AAAA,YAC/B,OAAO,MAAM;AAAA,UACf,CAAC;AACD;AAAA,QACF;AAAA;AAAA,QAGA,KAAK;AAAA,QACL,KAAK;AACH;AAAA,QAEF,KAAK,eAAe;AAClB,qBAAW,QAAQ;AAAA,YACjB,MAAM,yDAAyB;AAAA,YAC/B,OAAO;AAAA,cACL,YAAY,MAAM;AAAA,cAClB,QAAQ,MAAM;AAAA,YAChB;AAAA,UACF,CAAC;AACD;AAAA,QACF;AAAA,QAEA,KAAK,eAAe;AAClB,gBAAM,EAAE,MAAM,GAAG,KAAK,IAAI;AAC1B,qBAAW,QAAQ;AAAA,YACjB,MAAM,yDAAyB;AAAA,YAC/B,OAAO;AAAA,UACT,CAAC;AACD;AAAA,QACF;AAAA,QAEA,KAAK,UAAU;AACb,gBAAM,EAAE,MAAM,GAAG,KAAK,IAAI;AAC1B,qBAAW,QAAQ;AAAA,YACjB,MAAM,yDAAyB;AAAA,YAC/B,OAAO;AAAA,UACT,CAAC;AACD;AAAA,QACF;AAAA,QAEA,KAAK,SAAS;AACZ,qBAAW,QAAQ;AAAA,YACjB,MAAM,yDAAyB;AAAA,YAC/B,OAAO,MAAM;AAAA,UACf,CAAC;AACD;AAAA,QACF;AAAA,QACA,SAAS;AACP,gBAAM,gBAAuB;AAC7B,gBAAM,IAAI,MAAM,yBAAyB,aAAa,EAAE;AAAA,QAC1D;AAAA,MACF;AAAA,IACF;AAAA,EACF,CAAC;AACH;","names":[]}