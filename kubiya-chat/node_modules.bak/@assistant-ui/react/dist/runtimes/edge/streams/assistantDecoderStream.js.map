{"version":3,"sources":["../../../../src/runtimes/edge/streams/assistantDecoderStream.ts"],"sourcesContent":["import {\n  AssistantStreamChunk,\n  AssistantStreamChunkType,\n} from \"./AssistantStreamChunkType\";\nimport { StreamPart } from \"./utils/StreamPart\";\nimport { ToolResultStreamPart } from \"./toolResultStream\";\n\nexport function assistantDecoderStream() {\n  const toolCallNames = new Map<string, string>();\n  let currentToolCall:\n    | { id: string; name: string; argsText: string }\n    | undefined;\n\n  const endCurrentToolCall = (\n    controller: TransformStreamDefaultController<ToolResultStreamPart>,\n  ) => {\n    if (!currentToolCall) return;\n    controller.enqueue({\n      type: \"tool-call\",\n      toolCallType: \"function\",\n      toolCallId: currentToolCall.id,\n      toolName: currentToolCall.name,\n      args: currentToolCall.argsText,\n    });\n    currentToolCall = undefined;\n  };\n\n  return new TransformStream<\n    StreamPart<AssistantStreamChunk>,\n    ToolResultStreamPart\n  >({\n    transform({ type, value }, controller) {\n      if (\n        type !== AssistantStreamChunkType.ToolCallDelta &&\n        type !== AssistantStreamChunkType.Error\n      ) {\n        endCurrentToolCall(controller);\n      }\n\n      switch (type) {\n        case AssistantStreamChunkType.TextDelta: {\n          controller.enqueue({\n            type: \"text-delta\",\n            textDelta: value,\n          });\n          break;\n        }\n        case AssistantStreamChunkType.ToolCallBegin: {\n          const { toolCallId: id, toolName: name } = value;\n          toolCallNames.set(id, name);\n\n          currentToolCall = { id, name, argsText: \"\" };\n\n          controller.enqueue({\n            type: \"tool-call-delta\",\n            toolCallType: \"function\",\n            toolCallId: id,\n            toolName: name,\n            argsTextDelta: \"\",\n          });\n          break;\n        }\n        case AssistantStreamChunkType.ToolCallDelta: {\n          const { toolCallId, argsTextDelta } = value;\n\n          const toolName = toolCallNames.get(toolCallId)!;\n          if (currentToolCall?.id === toolCallId) {\n            currentToolCall.argsText += argsTextDelta;\n          }\n          controller.enqueue({\n            type: \"tool-call-delta\",\n            toolCallType: \"function\",\n            toolCallId,\n            toolName,\n            argsTextDelta: argsTextDelta,\n          });\n          break;\n        }\n        case AssistantStreamChunkType.ToolCallResult: {\n          controller.enqueue({\n            type: \"tool-result\",\n            toolCallType: \"function\",\n            toolCallId: value.toolCallId,\n            toolName: toolCallNames.get(value.toolCallId)!,\n            result: value.result,\n          });\n          break;\n        }\n        case AssistantStreamChunkType.Finish: {\n          controller.enqueue({\n            type: \"finish\",\n            ...value,\n          });\n          break;\n        }\n        case AssistantStreamChunkType.Error: {\n          controller.enqueue({\n            type: \"error\",\n            error: value,\n          });\n          break;\n        }\n\n        case AssistantStreamChunkType.ToolCall: {\n          const { toolCallId, toolName, args } = value;\n          toolCallNames.set(toolCallId, toolName);\n\n          const argsText = JSON.stringify(args);\n          controller.enqueue({\n            type: \"tool-call-delta\",\n            toolCallType: \"function\",\n            toolCallId,\n            toolName,\n            argsTextDelta: argsText,\n          });\n          controller.enqueue({\n            type: \"tool-call\",\n            toolCallType: \"function\",\n            toolCallId: toolCallId,\n            toolName: toolName,\n            args: argsText,\n          });\n          break;\n        }\n\n        case AssistantStreamChunkType.StepFinish: {\n          controller.enqueue({\n            type: \"step-finish\",\n            ...value,\n          });\n          break;\n        }\n\n        case AssistantStreamChunkType.Data:\n          controller.enqueue({\n            type: \"data\",\n            data: value,\n          });\n          break;\n\n        // TODO\n        case AssistantStreamChunkType.Annotation:\n          break;\n\n        default: {\n          const unhandledType: never = type;\n          throw new Error(`Unhandled chunk type: ${unhandledType}`);\n        }\n      }\n    },\n    flush(controller) {\n      endCurrentToolCall(controller);\n    },\n  });\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCAGO;AAIA,SAAS,yBAAyB;AACvC,QAAM,gBAAgB,oBAAI,IAAoB;AAC9C,MAAI;AAIJ,QAAM,qBAAqB,CACzB,eACG;AACH,QAAI,CAAC,gBAAiB;AACtB,eAAW,QAAQ;AAAA,MACjB,MAAM;AAAA,MACN,cAAc;AAAA,MACd,YAAY,gBAAgB;AAAA,MAC5B,UAAU,gBAAgB;AAAA,MAC1B,MAAM,gBAAgB;AAAA,IACxB,CAAC;AACD,sBAAkB;AAAA,EACpB;AAEA,SAAO,IAAI,gBAGT;AAAA,IACA,UAAU,EAAE,MAAM,MAAM,GAAG,YAAY;AACrC,UACE,SAAS,yDAAyB,iBAClC,SAAS,yDAAyB,OAClC;AACA,2BAAmB,UAAU;AAAA,MAC/B;AAEA,cAAQ,MAAM;AAAA,QACZ,KAAK,yDAAyB,WAAW;AACvC,qBAAW,QAAQ;AAAA,YACjB,MAAM;AAAA,YACN,WAAW;AAAA,UACb,CAAC;AACD;AAAA,QACF;AAAA,QACA,KAAK,yDAAyB,eAAe;AAC3C,gBAAM,EAAE,YAAY,IAAI,UAAU,KAAK,IAAI;AAC3C,wBAAc,IAAI,IAAI,IAAI;AAE1B,4BAAkB,EAAE,IAAI,MAAM,UAAU,GAAG;AAE3C,qBAAW,QAAQ;AAAA,YACjB,MAAM;AAAA,YACN,cAAc;AAAA,YACd,YAAY;AAAA,YACZ,UAAU;AAAA,YACV,eAAe;AAAA,UACjB,CAAC;AACD;AAAA,QACF;AAAA,QACA,KAAK,yDAAyB,eAAe;AAC3C,gBAAM,EAAE,YAAY,cAAc,IAAI;AAEtC,gBAAM,WAAW,cAAc,IAAI,UAAU;AAC7C,cAAI,iBAAiB,OAAO,YAAY;AACtC,4BAAgB,YAAY;AAAA,UAC9B;AACA,qBAAW,QAAQ;AAAA,YACjB,MAAM;AAAA,YACN,cAAc;AAAA,YACd;AAAA,YACA;AAAA,YACA;AAAA,UACF,CAAC;AACD;AAAA,QACF;AAAA,QACA,KAAK,yDAAyB,gBAAgB;AAC5C,qBAAW,QAAQ;AAAA,YACjB,MAAM;AAAA,YACN,cAAc;AAAA,YACd,YAAY,MAAM;AAAA,YAClB,UAAU,cAAc,IAAI,MAAM,UAAU;AAAA,YAC5C,QAAQ,MAAM;AAAA,UAChB,CAAC;AACD;AAAA,QACF;AAAA,QACA,KAAK,yDAAyB,QAAQ;AACpC,qBAAW,QAAQ;AAAA,YACjB,MAAM;AAAA,YACN,GAAG;AAAA,UACL,CAAC;AACD;AAAA,QACF;AAAA,QACA,KAAK,yDAAyB,OAAO;AACnC,qBAAW,QAAQ;AAAA,YACjB,MAAM;AAAA,YACN,OAAO;AAAA,UACT,CAAC;AACD;AAAA,QACF;AAAA,QAEA,KAAK,yDAAyB,UAAU;AACtC,gBAAM,EAAE,YAAY,UAAU,KAAK,IAAI;AACvC,wBAAc,IAAI,YAAY,QAAQ;AAEtC,gBAAM,WAAW,KAAK,UAAU,IAAI;AACpC,qBAAW,QAAQ;AAAA,YACjB,MAAM;AAAA,YACN,cAAc;AAAA,YACd;AAAA,YACA;AAAA,YACA,eAAe;AAAA,UACjB,CAAC;AACD,qBAAW,QAAQ;AAAA,YACjB,MAAM;AAAA,YACN,cAAc;AAAA,YACd;AAAA,YACA;AAAA,YACA,MAAM;AAAA,UACR,CAAC;AACD;AAAA,QACF;AAAA,QAEA,KAAK,yDAAyB,YAAY;AACxC,qBAAW,QAAQ;AAAA,YACjB,MAAM;AAAA,YACN,GAAG;AAAA,UACL,CAAC;AACD;AAAA,QACF;AAAA,QAEA,KAAK,yDAAyB;AAC5B,qBAAW,QAAQ;AAAA,YACjB,MAAM;AAAA,YACN,MAAM;AAAA,UACR,CAAC;AACD;AAAA;AAAA,QAGF,KAAK,yDAAyB;AAC5B;AAAA,QAEF,SAAS;AACP,gBAAM,gBAAuB;AAC7B,gBAAM,IAAI,MAAM,yBAAyB,aAAa,EAAE;AAAA,QAC1D;AAAA,MACF;AAAA,IACF;AAAA,IACA,MAAM,YAAY;AAChB,yBAAmB,UAAU;AAAA,IAC/B;AAAA,EACF,CAAC;AACH;","names":[]}