{"version":3,"sources":["../../../src/runtimes/edge/EdgeChatAdapter.ts"],"sourcesContent":["import {\n  ChatModelAdapter,\n  ChatModelRunOptions,\n} from \"../local/ChatModelAdapter\";\nimport { ChatModelRunResult } from \"../local/ChatModelAdapter\";\nimport { toCoreMessages } from \"./converters/toCoreMessages\";\nimport { toLanguageModelTools } from \"./converters/toLanguageModelTools\";\nimport { EdgeRuntimeRequestOptions } from \"./EdgeRuntimeRequestOptions\";\nimport { assistantDecoderStream } from \"./streams/assistantDecoderStream\";\nimport { streamPartDecoderStream } from \"./streams/utils/streamPartDecoderStream\";\nimport { runResultStream } from \"./streams/runResultStream\";\nimport { toolResultStream } from \"./streams/toolResultStream\";\nimport { toLanguageModelMessages } from \"./converters\";\n\nexport function asAsyncIterable<T>(\n  source: ReadableStream<T>,\n): AsyncIterable<T> {\n  return {\n    [Symbol.asyncIterator]: () => {\n      const reader = source.getReader();\n      return {\n        async next(): Promise<IteratorResult<T, undefined>> {\n          const { done, value } = await reader.read();\n          return done\n            ? { done: true, value: undefined }\n            : { done: false, value };\n        },\n      };\n    },\n  };\n}\nexport type EdgeChatAdapterOptions = {\n  api: string;\n\n  credentials?: RequestCredentials;\n  headers?: Record<string, string> | Headers;\n  body?: object;\n\n  /**\n   * When enabled, the adapter will not strip `id` from messages in the messages array.\n   */\n  unstable_sendMessageIds?: boolean;\n\n  /**\n   * When enabled, the adapter will send messages in the format expected by the Vercel AI SDK Core.\n   * This feature will be removed in the future in favor of a better solution.\n   */\n  unstable_AISDKInterop?: boolean | undefined;\n};\n\nexport class EdgeChatAdapter implements ChatModelAdapter {\n  constructor(private options: EdgeChatAdapterOptions) {}\n\n  async *run({\n    messages,\n    runConfig,\n    abortSignal,\n    config,\n    unstable_assistantMessageId,\n  }: ChatModelRunOptions) {\n    const headers = new Headers(this.options.headers);\n    headers.set(\"Content-Type\", \"application/json\");\n\n    const result = await fetch(this.options.api, {\n      method: \"POST\",\n      headers,\n      credentials: this.options.credentials ?? \"same-origin\",\n      body: JSON.stringify({\n        system: config.system,\n        messages: this.options.unstable_AISDKInterop\n          ? (toLanguageModelMessages(\n              messages,\n            ) as EdgeRuntimeRequestOptions[\"messages\"]) // TODO figure out a better way to do this\n          : toCoreMessages(messages, {\n              unstable_includeId: this.options.unstable_sendMessageIds,\n            }),\n        tools: config.tools ? toLanguageModelTools(config.tools) : [],\n        unstable_assistantMessageId,\n        runConfig,\n        ...config.callSettings,\n        ...config.config,\n\n        ...this.options.body,\n      } satisfies EdgeRuntimeRequestOptions),\n      signal: abortSignal,\n    });\n\n    if (!result.ok) {\n      throw new Error(`Status ${result.status}: ${await result.text()}`);\n    }\n\n    const stream = result\n      .body!.pipeThrough(streamPartDecoderStream())\n      .pipeThrough(assistantDecoderStream())\n      .pipeThrough(toolResultStream(config.tools, abortSignal))\n      .pipeThrough(runResultStream());\n\n    let update: ChatModelRunResult | undefined;\n    for await (update of asAsyncIterable(stream)) {\n      yield update;\n    }\n\n    if (update === undefined)\n      throw new Error(\"No data received from Edge Runtime\");\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA,4BAA+B;AAC/B,kCAAqC;AAErC,oCAAuC;AACvC,qCAAwC;AACxC,6BAAgC;AAChC,8BAAiC;AACjC,wBAAwC;AAEjC,SAAS,gBACd,QACkB;AAClB,SAAO;AAAA,IACL,CAAC,OAAO,aAAa,GAAG,MAAM;AAC5B,YAAM,SAAS,OAAO,UAAU;AAChC,aAAO;AAAA,QACL,MAAM,OAA8C;AAClD,gBAAM,EAAE,MAAM,MAAM,IAAI,MAAM,OAAO,KAAK;AAC1C,iBAAO,OACH,EAAE,MAAM,MAAM,OAAO,OAAU,IAC/B,EAAE,MAAM,OAAO,MAAM;AAAA,QAC3B;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF;AAoBO,IAAM,kBAAN,MAAkD;AAAA,EACvD,YAAoB,SAAiC;AAAjC;AAAA,EAAkC;AAAA,EAEtD,OAAO,IAAI;AAAA,IACT;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,GAAwB;AACtB,UAAM,UAAU,IAAI,QAAQ,KAAK,QAAQ,OAAO;AAChD,YAAQ,IAAI,gBAAgB,kBAAkB;AAE9C,UAAM,SAAS,MAAM,MAAM,KAAK,QAAQ,KAAK;AAAA,MAC3C,QAAQ;AAAA,MACR;AAAA,MACA,aAAa,KAAK,QAAQ,eAAe;AAAA,MACzC,MAAM,KAAK,UAAU;AAAA,QACnB,QAAQ,OAAO;AAAA,QACf,UAAU,KAAK,QAAQ,4BAClB;AAAA,UACC;AAAA,QACF,QACA,sCAAe,UAAU;AAAA,UACvB,oBAAoB,KAAK,QAAQ;AAAA,QACnC,CAAC;AAAA,QACL,OAAO,OAAO,YAAQ,kDAAqB,OAAO,KAAK,IAAI,CAAC;AAAA,QAC5D;AAAA,QACA;AAAA,QACA,GAAG,OAAO;AAAA,QACV,GAAG,OAAO;AAAA,QAEV,GAAG,KAAK,QAAQ;AAAA,MAClB,CAAqC;AAAA,MACrC,QAAQ;AAAA,IACV,CAAC;AAED,QAAI,CAAC,OAAO,IAAI;AACd,YAAM,IAAI,MAAM,UAAU,OAAO,MAAM,KAAK,MAAM,OAAO,KAAK,CAAC,EAAE;AAAA,IACnE;AAEA,UAAM,SAAS,OACZ,KAAM,gBAAY,wDAAwB,CAAC,EAC3C,gBAAY,sDAAuB,CAAC,EACpC,gBAAY,0CAAiB,OAAO,OAAO,WAAW,CAAC,EACvD,gBAAY,wCAAgB,CAAC;AAEhC,QAAI;AACJ,eAAW,UAAU,gBAAgB,MAAM,GAAG;AAC5C,YAAM;AAAA,IACR;AAEA,QAAI,WAAW;AACb,YAAM,IAAI,MAAM,oCAAoC;AAAA,EACxD;AACF;","names":[]}