"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/runtimes/edge/converters/fromCoreMessage.ts
var fromCoreMessage_exports = {};
__export(fromCoreMessage_exports, {
  fromCoreMessage: () => fromCoreMessage,
  fromCoreMessages: () => fromCoreMessages
});
module.exports = __toCommonJS(fromCoreMessage_exports);
var import_internal = require("../../../internal.js");
var fromCoreMessages = (message) => {
  return message.map((message2) => fromCoreMessage(message2));
};
var fromCoreMessage = (message, {
  id = (0, import_internal.generateId)(),
  status = { type: "complete", reason: "unknown" },
  attachments = []
} = {}) => {
  const commonProps = {
    id,
    createdAt: /* @__PURE__ */ new Date()
  };
  const role = message.role;
  switch (role) {
    case "assistant":
      return {
        ...commonProps,
        role,
        content: message.content.map((part) => {
          if (part.type === "tool-call") {
            return {
              ...part,
              argsText: JSON.stringify(part.args)
            };
          }
          return part;
        }),
        status,
        metadata: { unstable_data: [], steps: [], custom: {} }
      };
    case "user":
      return {
        ...commonProps,
        role,
        content: message.content,
        attachments,
        metadata: { custom: {} }
      };
    case "system":
      return {
        ...commonProps,
        role,
        content: message.content,
        metadata: { custom: {} }
      };
    default: {
      const unsupportedRole = role;
      throw new Error(`Unknown message role: ${unsupportedRole}`);
    }
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  fromCoreMessage,
  fromCoreMessages
});
//# sourceMappingURL=fromCoreMessage.js.map