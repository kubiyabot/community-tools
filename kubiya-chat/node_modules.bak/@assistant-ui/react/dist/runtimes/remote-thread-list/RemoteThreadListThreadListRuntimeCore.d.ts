import { ThreadListRuntimeCore } from "../core/ThreadListRuntimeCore";
import { RemoteThreadListAdapter } from "./types";
import { BaseSubscribable } from "./BaseSubscribable";
import { FC } from "react";
type RemoteThreadData = {
    readonly threadId: string;
    readonly remoteId?: undefined;
    readonly externalId?: undefined;
    readonly status: "new";
    readonly title: undefined;
} | {
    readonly threadId: string;
    readonly remoteId: string;
    readonly externalId: string | undefined;
    readonly status: "regular" | "archived";
    readonly title?: string | undefined;
};
export declare class RemoteThreadListThreadListRuntimeCore extends BaseSubscribable implements ThreadListRuntimeCore {
    private _adapter;
    private _disposeOldAdapter?;
    private readonly _hookManager;
    private readonly _loadThreadsPromise;
    private _mainThreadId;
    private readonly _state;
    getLoadThreadsPromise(): Promise<void>;
    constructor(adapter: RemoteThreadListAdapter);
    private useProvider;
    __internal_setAdapter(adapter: RemoteThreadListAdapter): void;
    get threadIds(): readonly string[];
    get archivedThreadIds(): readonly string[];
    get newThreadId(): string | undefined;
    get mainThreadId(): string;
    getMainThreadRuntimeCore(): Readonly<{
        getMessageById: (messageId: string) => {
            parentId: string | null;
            message: import("../..").ThreadMessage;
        } | undefined;
        getBranches: (messageId: string) => readonly string[];
        switchToBranch: (branchId: string) => void;
        append: (message: import("../..").AppendMessage) => void;
        startRun: (config: import("../core/ThreadRuntimeCore").StartRunConfig) => void;
        cancelRun: () => void;
        addToolResult: (options: import("..").AddToolResultOptions) => void;
        speak: (messageId: string) => void;
        stopSpeaking: () => void;
        getSubmittedFeedback: (messageId: string) => import("../core/ThreadRuntimeCore").SubmittedFeedback | undefined;
        submitFeedback: (feedback: import("..").SubmitFeedbackOptions) => void;
        getModelConfig: () => import("../..").ModelConfig;
        composer: import("../core/ComposerRuntimeCore").ThreadComposerRuntimeCore;
        getEditComposer: (messageId: string) => import("../core/ComposerRuntimeCore").ComposerRuntimeCore | undefined;
        beginEdit: (messageId: string) => void;
        speech: import("../core/ThreadRuntimeCore").SpeechState | undefined;
        capabilities: Readonly<import("../core/ThreadRuntimeCore").RuntimeCapabilities>;
        isDisabled: boolean;
        messages: readonly import("../..").ThreadMessage[];
        suggestions: readonly import("..").ThreadSuggestion[];
        extras: unknown;
        subscribe: (callback: () => void) => import("../..").Unsubscribe;
        import(repository: import("../utils/MessageRepository").ExportedMessageRepository): void;
        export(): import("../utils/MessageRepository").ExportedMessageRepository;
        unstable_on(event: import("../core/ThreadRuntimeCore").ThreadRuntimeEventType, callback: () => void): import("../..").Unsubscribe;
    }>;
    getItemById(threadIdOrRemoteId: string): RemoteThreadData | undefined;
    switchToThread(threadIdOrRemoteId: string): Promise<void>;
    switchToNewThread(): Promise<void>;
    private _onInitialize;
    rename(threadIdOrRemoteId: string, newTitle: string): Promise<void>;
    private _ensureThreadIsNotMain;
    archive(threadIdOrRemoteId: string): Promise<void>;
    unarchive(threadIdOrRemoteId: string): Promise<void>;
    delete(threadIdOrRemoteId: string): Promise<void>;
    private useBoundIds;
    __internal_RenderComponent: FC;
}
export {};
//# sourceMappingURL=RemoteThreadListThreadListRuntimeCore.d.ts.map