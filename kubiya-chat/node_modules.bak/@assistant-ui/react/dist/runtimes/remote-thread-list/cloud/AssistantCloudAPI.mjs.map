{"version":3,"sources":["../../../../src/runtimes/remote-thread-list/cloud/AssistantCloudAPI.tsx"],"sourcesContent":["import {\n  AssistantCloudAuthStrategy,\n  AssistantCloudJWTAuthStrategy,\n  AssistantCloudAPIKeyAuthStrategy,\n} from \"./AssistantCloudAuthStrategy\";\n\nexport type AssistantCloudConfig =\n  | {\n      baseUrl: string;\n      // TODO use baseUrl to construct the projectId\n      unstable_projectId: string;\n      authToken(): Promise<string>;\n    }\n  | {\n      apiKey: string;\n      workspaceId: string;\n    };\n\nexport class AssistantCloudAPI {\n  private _tokenManager: AssistantCloudAuthStrategy;\n  private _baseUrl;\n\n  constructor(config: AssistantCloudConfig) {\n    if (\"authToken\" in config) {\n      this._baseUrl = config.baseUrl;\n      this._tokenManager = new AssistantCloudJWTAuthStrategy(\n        config.unstable_projectId,\n        config.authToken,\n      );\n    } else {\n      this._baseUrl = \"https://api.assistant-ui.com\";\n      this._tokenManager = new AssistantCloudAPIKeyAuthStrategy(\n        config.apiKey,\n        config.workspaceId,\n      );\n    }\n  }\n\n  public async makeRequest(\n    endpoint: string,\n    options: {\n      method?: \"POST\" | \"PUT\" | \"DELETE\" | undefined;\n      query?: Record<string, string | number | boolean> | undefined;\n      body?: object | undefined;\n    } = {},\n  ) {\n    const authHeaders = await this._tokenManager.getAuthHeaders();\n    const headers = {\n      ...authHeaders,\n      \"Content-Type\": \"application/json\",\n    };\n\n    const queryParams = new URLSearchParams();\n    if (options.query) {\n      for (const [key, value] of Object.entries(options.query)) {\n        if (value === false) continue;\n        if (value === true) {\n          queryParams.set(key, \"true\");\n        } else {\n          queryParams.set(key, value.toString());\n        }\n      }\n    }\n\n    const url = new URL(`${this._baseUrl}${endpoint}`);\n    url.search = queryParams.toString();\n\n    const response = await fetch(url, {\n      method: options.method ?? \"GET\",\n      headers,\n      body: options.body ? JSON.stringify(options.body) : null,\n    });\n\n    if (!response.ok) {\n      // TODO better error handling\n      throw new Error(`Request failed with status ${response.status}`);\n    }\n\n    return response.json();\n  }\n}\n"],"mappings":";AAAA;AAAA,EAEE;AAAA,EACA;AAAA,OACK;AAcA,IAAM,oBAAN,MAAwB;AAAA,EACrB;AAAA,EACA;AAAA,EAER,YAAY,QAA8B;AACxC,QAAI,eAAe,QAAQ;AACzB,WAAK,WAAW,OAAO;AACvB,WAAK,gBAAgB,IAAI;AAAA,QACvB,OAAO;AAAA,QACP,OAAO;AAAA,MACT;AAAA,IACF,OAAO;AACL,WAAK,WAAW;AAChB,WAAK,gBAAgB,IAAI;AAAA,QACvB,OAAO;AAAA,QACP,OAAO;AAAA,MACT;AAAA,IACF;AAAA,EACF;AAAA,EAEA,MAAa,YACX,UACA,UAII,CAAC,GACL;AACA,UAAM,cAAc,MAAM,KAAK,cAAc,eAAe;AAC5D,UAAM,UAAU;AAAA,MACd,GAAG;AAAA,MACH,gBAAgB;AAAA,IAClB;AAEA,UAAM,cAAc,IAAI,gBAAgB;AACxC,QAAI,QAAQ,OAAO;AACjB,iBAAW,CAAC,KAAK,KAAK,KAAK,OAAO,QAAQ,QAAQ,KAAK,GAAG;AACxD,YAAI,UAAU,MAAO;AACrB,YAAI,UAAU,MAAM;AAClB,sBAAY,IAAI,KAAK,MAAM;AAAA,QAC7B,OAAO;AACL,sBAAY,IAAI,KAAK,MAAM,SAAS,CAAC;AAAA,QACvC;AAAA,MACF;AAAA,IACF;AAEA,UAAM,MAAM,IAAI,IAAI,GAAG,KAAK,QAAQ,GAAG,QAAQ,EAAE;AACjD,QAAI,SAAS,YAAY,SAAS;AAElC,UAAM,WAAW,MAAM,MAAM,KAAK;AAAA,MAChC,QAAQ,QAAQ,UAAU;AAAA,MAC1B;AAAA,MACA,MAAM,QAAQ,OAAO,KAAK,UAAU,QAAQ,IAAI,IAAI;AAAA,IACtD,CAAC;AAED,QAAI,CAAC,SAAS,IAAI;AAEhB,YAAM,IAAI,MAAM,8BAA8B,SAAS,MAAM,EAAE;AAAA,IACjE;AAEA,WAAO,SAAS,KAAK;AAAA,EACvB;AACF;","names":[]}