{"version":3,"sources":["../../../../src/runtimes/remote-thread-list/cloud/AssistantCloudAuthStrategy.tsx"],"sourcesContent":["export type AssistantCloudAuthStrategy = {\n  readonly strategy: \"jwt\" | \"api-key\";\n  getAuthHeaders(): Promise<Record<string, string>>;\n};\n\nexport class AssistantCloudJWTAuthStrategy\n  implements AssistantCloudAuthStrategy\n{\n  public readonly strategy = \"jwt\";\n\n  private cachedToken: string | null = null;\n  private tokenExpiry: number | null = null;\n\n  #projectId;\n  #authTokenCallback;\n\n  constructor(projectId: string, authTokenCallback: () => Promise<string>) {\n    this.#projectId = projectId;\n    this.#authTokenCallback = authTokenCallback;\n  }\n\n  private getJwtExpiry(jwt: string): number {\n    try {\n      const bodyPart = jwt.split(\".\").at(1);\n      if (!bodyPart) {\n        throw new Error(\"Invalid JWT format\");\n      }\n\n      // Base64Url decode\n      const payload = Buffer.from(\n        bodyPart.replace(/-/g, \"+\").replace(/_/g, \"/\"),\n        \"base64\",\n      ).toString();\n      const payloadObj = JSON.parse(payload);\n\n      const exp = payloadObj.exp;\n      if (!exp || typeof exp !== \"number\") {\n        throw new Error('JWT does not contain a valid \"exp\" field');\n      }\n\n      // Convert exp to milliseconds\n      return exp * 1000;\n    } catch (error) {\n      throw new Error(\"Unable to determine the token expiry \" + error);\n    }\n  }\n\n  public async getAuthHeaders(): Promise<Record<string, string>> {\n    const currentTime = Date.now();\n\n    // Check if the cached token is valid for at least 30 seconds\n    if (\n      this.cachedToken &&\n      this.tokenExpiry &&\n      this.tokenExpiry - currentTime > 30 * 1000 // 30 seconds\n    ) {\n      return {\n        Authorization: `Bearer ${this.cachedToken}`,\n        \"Aui-Project-Id\": this.#projectId,\n      };\n    }\n\n    // Fetch a new token\n    const newToken = await this.#authTokenCallback();\n    const expiry = this.getJwtExpiry(newToken);\n\n    this.cachedToken = newToken;\n    this.tokenExpiry = expiry;\n\n    return {\n      Authorization: `Bearer ${newToken}`,\n      \"Aui-Project-Id\": this.#projectId,\n    };\n  }\n}\nexport class AssistantCloudAPIKeyAuthStrategy\n  implements AssistantCloudAuthStrategy\n{\n  public readonly strategy = \"api-key\";\n\n  #apiKey;\n  #workspaceId;\n\n  constructor(apiKey: string, workspaceId: string) {\n    this.#apiKey = apiKey;\n    this.#workspaceId = workspaceId;\n  }\n\n  public async getAuthHeaders(): Promise<Record<string, string>> {\n    return {\n      Authorization: `Bearer ${this.#apiKey}`,\n      \"Aui-Workspace-Id\": this.#workspaceId,\n    };\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKO,IAAM,gCAAN,MAEP;AAAA,EACkB,WAAW;AAAA,EAEnB,cAA6B;AAAA,EAC7B,cAA6B;AAAA,EAErC;AAAA,EACA;AAAA,EAEA,YAAY,WAAmB,mBAA0C;AACvE,SAAK,aAAa;AAClB,SAAK,qBAAqB;AAAA,EAC5B;AAAA,EAEQ,aAAa,KAAqB;AACxC,QAAI;AACF,YAAM,WAAW,IAAI,MAAM,GAAG,EAAE,GAAG,CAAC;AACpC,UAAI,CAAC,UAAU;AACb,cAAM,IAAI,MAAM,oBAAoB;AAAA,MACtC;AAGA,YAAM,UAAU,OAAO;AAAA,QACrB,SAAS,QAAQ,MAAM,GAAG,EAAE,QAAQ,MAAM,GAAG;AAAA,QAC7C;AAAA,MACF,EAAE,SAAS;AACX,YAAM,aAAa,KAAK,MAAM,OAAO;AAErC,YAAM,MAAM,WAAW;AACvB,UAAI,CAAC,OAAO,OAAO,QAAQ,UAAU;AACnC,cAAM,IAAI,MAAM,0CAA0C;AAAA,MAC5D;AAGA,aAAO,MAAM;AAAA,IACf,SAAS,OAAO;AACd,YAAM,IAAI,MAAM,0CAA0C,KAAK;AAAA,IACjE;AAAA,EACF;AAAA,EAEA,MAAa,iBAAkD;AAC7D,UAAM,cAAc,KAAK,IAAI;AAG7B,QACE,KAAK,eACL,KAAK,eACL,KAAK,cAAc,cAAc,KAAK,KACtC;AACA,aAAO;AAAA,QACL,eAAe,UAAU,KAAK,WAAW;AAAA,QACzC,kBAAkB,KAAK;AAAA,MACzB;AAAA,IACF;AAGA,UAAM,WAAW,MAAM,KAAK,mBAAmB;AAC/C,UAAM,SAAS,KAAK,aAAa,QAAQ;AAEzC,SAAK,cAAc;AACnB,SAAK,cAAc;AAEnB,WAAO;AAAA,MACL,eAAe,UAAU,QAAQ;AAAA,MACjC,kBAAkB,KAAK;AAAA,IACzB;AAAA,EACF;AACF;AACO,IAAM,mCAAN,MAEP;AAAA,EACkB,WAAW;AAAA,EAE3B;AAAA,EACA;AAAA,EAEA,YAAY,QAAgB,aAAqB;AAC/C,SAAK,UAAU;AACf,SAAK,eAAe;AAAA,EACtB;AAAA,EAEA,MAAa,iBAAkD;AAC7D,WAAO;AAAA,MACL,eAAe,UAAU,KAAK,OAAO;AAAA,MACrC,oBAAoB,KAAK;AAAA,IAC3B;AAAA,EACF;AACF;","names":[]}