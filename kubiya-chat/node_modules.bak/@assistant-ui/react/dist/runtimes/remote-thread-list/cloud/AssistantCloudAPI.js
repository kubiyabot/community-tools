"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/runtimes/remote-thread-list/cloud/AssistantCloudAPI.tsx
var AssistantCloudAPI_exports = {};
__export(AssistantCloudAPI_exports, {
  AssistantCloudAPI: () => AssistantCloudAPI
});
module.exports = __toCommonJS(AssistantCloudAPI_exports);
var import_AssistantCloudAuthStrategy = require("./AssistantCloudAuthStrategy.js");
var AssistantCloudAPI = class {
  _tokenManager;
  _baseUrl;
  constructor(config) {
    if ("authToken" in config) {
      this._baseUrl = config.baseUrl;
      this._tokenManager = new import_AssistantCloudAuthStrategy.AssistantCloudJWTAuthStrategy(
        config.unstable_projectId,
        config.authToken
      );
    } else {
      this._baseUrl = "https://api.assistant-ui.com";
      this._tokenManager = new import_AssistantCloudAuthStrategy.AssistantCloudAPIKeyAuthStrategy(
        config.apiKey,
        config.workspaceId
      );
    }
  }
  async makeRequest(endpoint, options = {}) {
    const authHeaders = await this._tokenManager.getAuthHeaders();
    const headers = {
      ...authHeaders,
      "Content-Type": "application/json"
    };
    const queryParams = new URLSearchParams();
    if (options.query) {
      for (const [key, value] of Object.entries(options.query)) {
        if (value === false) continue;
        if (value === true) {
          queryParams.set(key, "true");
        } else {
          queryParams.set(key, value.toString());
        }
      }
    }
    const url = new URL(`${this._baseUrl}${endpoint}`);
    url.search = queryParams.toString();
    const response = await fetch(url, {
      method: options.method ?? "GET",
      headers,
      body: options.body ? JSON.stringify(options.body) : null
    });
    if (!response.ok) {
      throw new Error(`Request failed with status ${response.status}`);
    }
    return response.json();
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  AssistantCloudAPI
});
//# sourceMappingURL=AssistantCloudAPI.js.map