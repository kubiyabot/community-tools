// src/runtimes/remote-thread-list/cloud/AssistantCloudAuthStrategy.tsx
var AssistantCloudJWTAuthStrategy = class {
  strategy = "jwt";
  cachedToken = null;
  tokenExpiry = null;
  #projectId;
  #authTokenCallback;
  constructor(projectId, authTokenCallback) {
    this.#projectId = projectId;
    this.#authTokenCallback = authTokenCallback;
  }
  getJwtExpiry(jwt) {
    try {
      const bodyPart = jwt.split(".").at(1);
      if (!bodyPart) {
        throw new Error("Invalid JWT format");
      }
      const payload = Buffer.from(
        bodyPart.replace(/-/g, "+").replace(/_/g, "/"),
        "base64"
      ).toString();
      const payloadObj = JSON.parse(payload);
      const exp = payloadObj.exp;
      if (!exp || typeof exp !== "number") {
        throw new Error('JWT does not contain a valid "exp" field');
      }
      return exp * 1e3;
    } catch (error) {
      throw new Error("Unable to determine the token expiry " + error);
    }
  }
  async getAuthHeaders() {
    const currentTime = Date.now();
    if (this.cachedToken && this.tokenExpiry && this.tokenExpiry - currentTime > 30 * 1e3) {
      return {
        Authorization: `Bearer ${this.cachedToken}`,
        "Aui-Project-Id": this.#projectId
      };
    }
    const newToken = await this.#authTokenCallback();
    const expiry = this.getJwtExpiry(newToken);
    this.cachedToken = newToken;
    this.tokenExpiry = expiry;
    return {
      Authorization: `Bearer ${newToken}`,
      "Aui-Project-Id": this.#projectId
    };
  }
};
var AssistantCloudAPIKeyAuthStrategy = class {
  strategy = "api-key";
  #apiKey;
  #workspaceId;
  constructor(apiKey, workspaceId) {
    this.#apiKey = apiKey;
    this.#workspaceId = workspaceId;
  }
  async getAuthHeaders() {
    return {
      Authorization: `Bearer ${this.#apiKey}`,
      "Aui-Workspace-Id": this.#workspaceId
    };
  }
};
export {
  AssistantCloudAPIKeyAuthStrategy,
  AssistantCloudJWTAuthStrategy
};
//# sourceMappingURL=AssistantCloudAuthStrategy.mjs.map