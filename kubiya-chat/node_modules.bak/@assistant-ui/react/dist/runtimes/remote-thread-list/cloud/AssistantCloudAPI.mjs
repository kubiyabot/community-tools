// src/runtimes/remote-thread-list/cloud/AssistantCloudAPI.tsx
import {
  AssistantCloudJWTAuthStrategy,
  AssistantCloudAPIKeyAuthStrategy
} from "./AssistantCloudAuthStrategy.mjs";
var AssistantCloudAPI = class {
  _tokenManager;
  _baseUrl;
  constructor(config) {
    if ("authToken" in config) {
      this._baseUrl = config.baseUrl;
      this._tokenManager = new AssistantCloudJWTAuthStrategy(
        config.unstable_projectId,
        config.authToken
      );
    } else {
      this._baseUrl = "https://api.assistant-ui.com";
      this._tokenManager = new AssistantCloudAPIKeyAuthStrategy(
        config.apiKey,
        config.workspaceId
      );
    }
  }
  async makeRequest(endpoint, options = {}) {
    const authHeaders = await this._tokenManager.getAuthHeaders();
    const headers = {
      ...authHeaders,
      "Content-Type": "application/json"
    };
    const queryParams = new URLSearchParams();
    if (options.query) {
      for (const [key, value] of Object.entries(options.query)) {
        if (value === false) continue;
        if (value === true) {
          queryParams.set(key, "true");
        } else {
          queryParams.set(key, value.toString());
        }
      }
    }
    const url = new URL(`${this._baseUrl}${endpoint}`);
    url.search = queryParams.toString();
    const response = await fetch(url, {
      method: options.method ?? "GET",
      headers,
      body: options.body ? JSON.stringify(options.body) : null
    });
    if (!response.ok) {
      throw new Error(`Request failed with status ${response.status}`);
    }
    return response.json();
  }
};
export {
  AssistantCloudAPI
};
//# sourceMappingURL=AssistantCloudAPI.mjs.map