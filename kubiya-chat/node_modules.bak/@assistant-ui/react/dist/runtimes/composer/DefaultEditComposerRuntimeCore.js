"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/runtimes/composer/DefaultEditComposerRuntimeCore.tsx
var DefaultEditComposerRuntimeCore_exports = {};
__export(DefaultEditComposerRuntimeCore_exports, {
  DefaultEditComposerRuntimeCore: () => DefaultEditComposerRuntimeCore
});
module.exports = __toCommonJS(DefaultEditComposerRuntimeCore_exports);
var import_getThreadMessageText = require("../../utils/getThreadMessageText.js");
var import_BaseComposerRuntimeCore = require("./BaseComposerRuntimeCore.js");
var DefaultEditComposerRuntimeCore = class extends import_BaseComposerRuntimeCore.BaseComposerRuntimeCore {
  constructor(runtime, endEditCallback, { parentId, message }) {
    super();
    this.runtime = runtime;
    this.endEditCallback = endEditCallback;
    this._parentId = parentId;
    this._sourceId = message.id;
    this._previousText = (0, import_getThreadMessageText.getThreadMessageText)(message);
    this.setText(this._previousText);
    this.setRole(message.role);
    this.setAttachments(message.attachments ?? []);
    this._nonTextParts = message.content.filter(
      (part) => part.type !== "text" && part.type !== "ui"
    );
  }
  get canCancel() {
    return true;
  }
  getAttachmentAdapter() {
    return this.runtime.adapters?.attachments;
  }
  _nonTextParts;
  _previousText;
  _parentId;
  _sourceId;
  async handleSend(message) {
    const text = (0, import_getThreadMessageText.getThreadMessageText)(message);
    if (text !== this._previousText) {
      this.runtime.append({
        ...message,
        content: [...message.content, ...this._nonTextParts],
        parentId: this._parentId,
        sourceId: this._sourceId
      });
    }
    this.handleCancel();
  }
  handleCancel() {
    this.endEditCallback();
    this._notifySubscribers();
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  DefaultEditComposerRuntimeCore
});
//# sourceMappingURL=DefaultEditComposerRuntimeCore.js.map