{"version":3,"sources":["../../../src/runtimes/external-store/ThreadMessageLike.tsx"],"sourcesContent":["import {\n  MessageStatus,\n  TextContentPart,\n  ImageContentPart,\n  ToolCallContentPart,\n  UIContentPart,\n  ThreadMessage,\n  ThreadAssistantContentPart,\n  ThreadAssistantMessage,\n  ThreadUserContentPart,\n  ThreadUserMessage,\n  ThreadSystemMessage,\n  CompleteAttachment,\n  FileContentPart,\n  Unstable_AudioContentPart,\n} from \"../../types\";\nimport {\n  CoreToolCallContentPart,\n  ThreadStep,\n} from \"../../types/AssistantTypes\";\n\nexport type ThreadMessageLike = {\n  readonly role: \"assistant\" | \"user\" | \"system\";\n  readonly content:\n    | string\n    | readonly (\n        | TextContentPart\n        | ImageContentPart\n        | FileContentPart\n        | Unstable_AudioContentPart\n        | ToolCallContentPart<any, any>\n        | CoreToolCallContentPart<any, any>\n        | UIContentPart\n      )[];\n  readonly id?: string | undefined;\n  readonly createdAt?: Date | undefined;\n  readonly status?: MessageStatus | undefined;\n  readonly attachments?: readonly CompleteAttachment[] | undefined;\n  readonly metadata?:\n    | {\n        readonly unstable_data?: readonly Record<string, unknown>[] | undefined;\n        readonly steps?: readonly ThreadStep[] | undefined;\n        readonly custom?: Record<string, unknown> | undefined;\n      }\n    | undefined;\n};\n\nexport const fromThreadMessageLike = (\n  like: ThreadMessageLike,\n  fallbackId: string,\n  fallbackStatus: MessageStatus,\n): ThreadMessage => {\n  const { role, id, createdAt, attachments, status, metadata } = like;\n  const common = {\n    id: id ?? fallbackId,\n    createdAt: createdAt ?? new Date(),\n  };\n\n  const content =\n    typeof like.content === \"string\"\n      ? [{ type: \"text\" as const, text: like.content }]\n      : like.content;\n\n  if (role !== \"user\" && attachments)\n    throw new Error(\"attachments are only supported for user messages\");\n\n  if (role !== \"assistant\" && status)\n    throw new Error(\"status is only supported for assistant messages\");\n\n  if (role !== \"assistant\" && metadata?.steps)\n    throw new Error(\"metadata.steps is only supported for assistant messages\");\n\n  switch (role) {\n    case \"assistant\":\n      return {\n        ...common,\n        role,\n        content: content\n          .map((part): ThreadAssistantContentPart | null => {\n            const type = part.type;\n            switch (type) {\n              case \"text\":\n                if (part.text.trim().length === 0) return null;\n                return part;\n\n              case \"ui\":\n                return part;\n\n              case \"tool-call\": {\n                if (\"argsText\" in part) return part;\n                return {\n                  ...part,\n                  argsText: JSON.stringify(part.args),\n                };\n              }\n\n              default: {\n                const unhandledType: \"image\" | \"audio\" | \"file\" = type;\n                throw new Error(\n                  `Unsupported assistant content part type: ${unhandledType}`,\n                );\n              }\n            }\n          })\n          .filter((c) => !!c),\n        status: status ?? fallbackStatus,\n        metadata: {\n          unstable_data: metadata?.unstable_data ?? [],\n          custom: metadata?.custom ?? {},\n          steps: metadata?.steps ?? [],\n        },\n      } satisfies ThreadAssistantMessage;\n\n    case \"user\":\n      return {\n        ...common,\n        role,\n        content: content.map((part): ThreadUserContentPart => {\n          const type = part.type;\n          switch (type) {\n            case \"text\":\n            case \"ui\":\n            case \"image\":\n            case \"audio\":\n            case \"file\":\n              return part;\n\n            default: {\n              const unhandledType: \"tool-call\" = type;\n              throw new Error(\n                `Unsupported user content part type: ${unhandledType}`,\n              );\n            }\n          }\n        }),\n        attachments: attachments ?? [],\n        metadata: {\n          custom: metadata?.custom ?? {},\n        },\n      } satisfies ThreadUserMessage;\n\n    case \"system\":\n      if (content.length !== 1 || content[0]!.type !== \"text\")\n        throw new Error(\n          \"System messages must have exactly one text content part.\",\n        );\n\n      return {\n        ...common,\n        role,\n        content: content as [TextContentPart],\n        metadata: {\n          custom: metadata?.custom ?? {},\n        },\n      } satisfies ThreadSystemMessage;\n\n    default: {\n      const unsupportedRole: never = role;\n      throw new Error(`Unknown message role: ${unsupportedRole}`);\n    }\n  }\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AA+CO,IAAM,wBAAwB,CACnC,MACA,YACA,mBACkB;AAClB,QAAM,EAAE,MAAM,IAAI,WAAW,aAAa,QAAQ,SAAS,IAAI;AAC/D,QAAM,SAAS;AAAA,IACb,IAAI,MAAM;AAAA,IACV,WAAW,aAAa,oBAAI,KAAK;AAAA,EACnC;AAEA,QAAM,UACJ,OAAO,KAAK,YAAY,WACpB,CAAC,EAAE,MAAM,QAAiB,MAAM,KAAK,QAAQ,CAAC,IAC9C,KAAK;AAEX,MAAI,SAAS,UAAU;AACrB,UAAM,IAAI,MAAM,kDAAkD;AAEpE,MAAI,SAAS,eAAe;AAC1B,UAAM,IAAI,MAAM,iDAAiD;AAEnE,MAAI,SAAS,eAAe,UAAU;AACpC,UAAM,IAAI,MAAM,yDAAyD;AAE3E,UAAQ,MAAM;AAAA,IACZ,KAAK;AACH,aAAO;AAAA,QACL,GAAG;AAAA,QACH;AAAA,QACA,SAAS,QACN,IAAI,CAAC,SAA4C;AAChD,gBAAM,OAAO,KAAK;AAClB,kBAAQ,MAAM;AAAA,YACZ,KAAK;AACH,kBAAI,KAAK,KAAK,KAAK,EAAE,WAAW,EAAG,QAAO;AAC1C,qBAAO;AAAA,YAET,KAAK;AACH,qBAAO;AAAA,YAET,KAAK,aAAa;AAChB,kBAAI,cAAc,KAAM,QAAO;AAC/B,qBAAO;AAAA,gBACL,GAAG;AAAA,gBACH,UAAU,KAAK,UAAU,KAAK,IAAI;AAAA,cACpC;AAAA,YACF;AAAA,YAEA,SAAS;AACP,oBAAM,gBAA4C;AAClD,oBAAM,IAAI;AAAA,gBACR,4CAA4C,aAAa;AAAA,cAC3D;AAAA,YACF;AAAA,UACF;AAAA,QACF,CAAC,EACA,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;AAAA,QACpB,QAAQ,UAAU;AAAA,QAClB,UAAU;AAAA,UACR,eAAe,UAAU,iBAAiB,CAAC;AAAA,UAC3C,QAAQ,UAAU,UAAU,CAAC;AAAA,UAC7B,OAAO,UAAU,SAAS,CAAC;AAAA,QAC7B;AAAA,MACF;AAAA,IAEF,KAAK;AACH,aAAO;AAAA,QACL,GAAG;AAAA,QACH;AAAA,QACA,SAAS,QAAQ,IAAI,CAAC,SAAgC;AACpD,gBAAM,OAAO,KAAK;AAClB,kBAAQ,MAAM;AAAA,YACZ,KAAK;AAAA,YACL,KAAK;AAAA,YACL,KAAK;AAAA,YACL,KAAK;AAAA,YACL,KAAK;AACH,qBAAO;AAAA,YAET,SAAS;AACP,oBAAM,gBAA6B;AACnC,oBAAM,IAAI;AAAA,gBACR,uCAAuC,aAAa;AAAA,cACtD;AAAA,YACF;AAAA,UACF;AAAA,QACF,CAAC;AAAA,QACD,aAAa,eAAe,CAAC;AAAA,QAC7B,UAAU;AAAA,UACR,QAAQ,UAAU,UAAU,CAAC;AAAA,QAC/B;AAAA,MACF;AAAA,IAEF,KAAK;AACH,UAAI,QAAQ,WAAW,KAAK,QAAQ,CAAC,EAAG,SAAS;AAC/C,cAAM,IAAI;AAAA,UACR;AAAA,QACF;AAEF,aAAO;AAAA,QACL,GAAG;AAAA,QACH;AAAA,QACA;AAAA,QACA,UAAU;AAAA,UACR,QAAQ,UAAU,UAAU,CAAC;AAAA,QAC/B;AAAA,MACF;AAAA,IAEF,SAAS;AACP,YAAM,kBAAyB;AAC/B,YAAM,IAAI,MAAM,yBAAyB,eAAe,EAAE;AAAA,IAC5D;AAAA,EACF;AACF;","names":[]}