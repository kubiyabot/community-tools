"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/utils/hooks/useOnResizeContent.tsx
var useOnResizeContent_exports = {};
__export(useOnResizeContent_exports, {
  useOnResizeContent: () => useOnResizeContent
});
module.exports = __toCommonJS(useOnResizeContent_exports);
var import_react_use_callback_ref = require("@radix-ui/react-use-callback-ref");
var import_react = require("react");
var import_useManagedRef = require("./useManagedRef.js");
var useOnResizeContent = (callback) => {
  const callbackRef = (0, import_react_use_callback_ref.useCallbackRef)(callback);
  const refCallback = (0, import_react.useCallback)(
    (el) => {
      const resizeObserver = new ResizeObserver(() => {
        callbackRef();
      });
      const mutationObserver = new MutationObserver((mutations) => {
        for (const mutation of mutations) {
          for (const node of mutation.addedNodes) {
            if (node instanceof Element) {
              resizeObserver.observe(node);
            }
          }
          for (const node of mutation.removedNodes) {
            if (node instanceof Element) {
              resizeObserver.unobserve(node);
            }
          }
        }
        callbackRef();
      });
      resizeObserver.observe(el);
      mutationObserver.observe(el, { childList: true });
      for (const child of el.children) {
        resizeObserver.observe(child);
      }
      return () => {
        resizeObserver.disconnect();
        mutationObserver.disconnect();
      };
    },
    [callbackRef]
  );
  return (0, import_useManagedRef.useManagedRef)(refCallback);
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  useOnResizeContent
});
//# sourceMappingURL=useOnResizeContent.js.map