{"version":3,"sources":["../../../src/context/providers/ThreadRuntimeProvider.tsx"],"sourcesContent":["\"use client\";\n\nimport type { FC, PropsWithChildren } from \"react\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport type { ThreadContextValue } from \"../react/ThreadContext\";\nimport { ThreadContext } from \"../react/ThreadContext\";\nimport { makeThreadViewportStore } from \"../stores/ThreadViewport\";\nimport { writableStore } from \"../ReadonlyStore\";\nimport { ThreadRuntime } from \"../../api/ThreadRuntime\";\nimport { create } from \"zustand\";\nimport { ThreadComposerRuntime } from \"../../api/ComposerRuntime\";\nimport { ThreadListItemRuntime } from \"../../api/ThreadListItemRuntime\";\nimport { ThreadListItemRuntimeProvider } from \"./ThreadListItemRuntimeProvider\";\n\ntype ThreadProviderProps = {\n  listItemRuntime: ThreadListItemRuntime;\n  runtime: ThreadRuntime;\n};\n\nconst useThreadRuntimeStore = (runtime: ThreadRuntime) => {\n  const [store] = useState(() => create(() => runtime));\n\n  useEffect(() => {\n    writableStore(store).setState(runtime, true);\n  }, [runtime, store]);\n\n  return store;\n};\n\nconst useThreadStore = (runtime: ThreadRuntime) => {\n  const [store] = useState(() => create(() => runtime.getState()));\n  useEffect(() => {\n    const updateState = () =>\n      writableStore(store).setState(runtime.getState(), true);\n    updateState();\n    return runtime.subscribe(updateState);\n  }, [runtime, store]);\n\n  return store;\n};\n\nconst useThreadComposerStore = (runtime: ThreadComposerRuntime) => {\n  const [store] = useState(() => create(() => runtime.getState()));\n\n  useEffect(() => {\n    const updateState = () =>\n      writableStore(store).setState(runtime.getState(), true);\n    updateState();\n    return runtime.subscribe(updateState);\n  }, [runtime, store]);\n\n  return store;\n};\n\nexport const ThreadRuntimeProvider: FC<\n  PropsWithChildren<ThreadProviderProps>\n> = ({ children, listItemRuntime: threadListItemRuntime, runtime }) => {\n  const useThreadRuntime = useThreadRuntimeStore(runtime);\n  const useThread = useThreadStore(runtime);\n  const useThreadComposer = useThreadComposerStore(runtime.composer);\n\n  const context = useMemo<ThreadContextValue>(() => {\n    const useViewport = makeThreadViewportStore();\n\n    return {\n      useThread,\n      useThreadRuntime,\n      useComposer: useThreadComposer,\n      useViewport,\n    };\n  }, [useThread, useThreadRuntime, useThreadComposer]);\n\n  return (\n    <ThreadListItemRuntimeProvider runtime={threadListItemRuntime}>\n      <ThreadContext.Provider value={context}>\n        {children}\n      </ThreadContext.Provider>\n    </ThreadListItemRuntimeProvider>\n  );\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA,mBAA6C;AAE7C,2BAA8B;AAC9B,4BAAwC;AACxC,2BAA8B;AAE9B,qBAAuB;AAGvB,2CAA8C;AA8DxC;AAvDN,IAAM,wBAAwB,CAAC,YAA2B;AACxD,QAAM,CAAC,KAAK,QAAI,uBAAS,UAAM,uBAAO,MAAM,OAAO,CAAC;AAEpD,8BAAU,MAAM;AACd,4CAAc,KAAK,EAAE,SAAS,SAAS,IAAI;AAAA,EAC7C,GAAG,CAAC,SAAS,KAAK,CAAC;AAEnB,SAAO;AACT;AAEA,IAAM,iBAAiB,CAAC,YAA2B;AACjD,QAAM,CAAC,KAAK,QAAI,uBAAS,UAAM,uBAAO,MAAM,QAAQ,SAAS,CAAC,CAAC;AAC/D,8BAAU,MAAM;AACd,UAAM,cAAc,UAClB,oCAAc,KAAK,EAAE,SAAS,QAAQ,SAAS,GAAG,IAAI;AACxD,gBAAY;AACZ,WAAO,QAAQ,UAAU,WAAW;AAAA,EACtC,GAAG,CAAC,SAAS,KAAK,CAAC;AAEnB,SAAO;AACT;AAEA,IAAM,yBAAyB,CAAC,YAAmC;AACjE,QAAM,CAAC,KAAK,QAAI,uBAAS,UAAM,uBAAO,MAAM,QAAQ,SAAS,CAAC,CAAC;AAE/D,8BAAU,MAAM;AACd,UAAM,cAAc,UAClB,oCAAc,KAAK,EAAE,SAAS,QAAQ,SAAS,GAAG,IAAI;AACxD,gBAAY;AACZ,WAAO,QAAQ,UAAU,WAAW;AAAA,EACtC,GAAG,CAAC,SAAS,KAAK,CAAC;AAEnB,SAAO;AACT;AAEO,IAAM,wBAET,CAAC,EAAE,UAAU,iBAAiB,uBAAuB,QAAQ,MAAM;AACrE,QAAM,mBAAmB,sBAAsB,OAAO;AACtD,QAAM,YAAY,eAAe,OAAO;AACxC,QAAM,oBAAoB,uBAAuB,QAAQ,QAAQ;AAEjE,QAAM,cAAU,sBAA4B,MAAM;AAChD,UAAM,kBAAc,+CAAwB;AAE5C,WAAO;AAAA,MACL;AAAA,MACA;AAAA,MACA,aAAa;AAAA,MACb;AAAA,IACF;AAAA,EACF,GAAG,CAAC,WAAW,kBAAkB,iBAAiB,CAAC;AAEnD,SACE,4CAAC,sEAA8B,SAAS,uBACtC,sDAAC,mCAAc,UAAd,EAAuB,OAAO,SAC5B,UACH,GACF;AAEJ;","names":[]}