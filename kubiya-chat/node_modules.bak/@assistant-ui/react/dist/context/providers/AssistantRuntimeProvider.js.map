{"version":3,"sources":["../../../src/context/providers/AssistantRuntimeProvider.tsx"],"sourcesContent":["\"use client\";\n\nimport {\n  FC,\n  PropsWithChildren,\n  memo,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\";\nimport { AssistantContext } from \"../react/AssistantContext\";\nimport { makeAssistantToolUIsStore } from \"../stores/AssistantToolUIs\";\nimport { ThreadRuntimeProvider } from \"./ThreadRuntimeProvider\";\nimport { AssistantRuntime } from \"../../api/AssistantRuntime\";\nimport { create } from \"zustand\";\nimport { writableStore } from \"../ReadonlyStore\";\nimport { AssistantRuntimeCore } from \"../../runtimes/core/AssistantRuntimeCore\";\n\nexport namespace AssistantRuntimeProvider {\n  export type Props = PropsWithChildren<{\n    /**\n     * The runtime to provide to the rest of your app.\n     */\n    runtime: AssistantRuntime;\n  }>;\n}\n\nconst useAssistantRuntimeStore = (runtime: AssistantRuntime) => {\n  const [store] = useState(() => create(() => runtime));\n\n  useEffect(() => {\n    writableStore(store).setState(runtime, true);\n  }, [runtime, store]);\n\n  return store;\n};\n\nconst useAssistantToolUIsStore = () => {\n  return useMemo(() => makeAssistantToolUIsStore(), []);\n};\n\nconst useThreadListStore = (runtime: AssistantRuntime) => {\n  const [store] = useState(() => create(() => runtime.threadList.getState()));\n\n  useEffect(() => {\n    const updateState = () =>\n      writableStore(store).setState(runtime.threadList.getState(), true);\n    updateState();\n    return runtime.threadList.subscribe(updateState);\n  }, [runtime, store]);\n\n  return store;\n};\n\nconst getRenderComponent = (runtime: AssistantRuntime) => {\n  return (runtime as { _core?: AssistantRuntimeCore })._core?.RenderComponent;\n};\n\nexport const AssistantRuntimeProviderImpl: FC<\n  AssistantRuntimeProvider.Props\n> = ({ children, runtime }) => {\n  const useAssistantRuntime = useAssistantRuntimeStore(runtime);\n  const useToolUIs = useAssistantToolUIsStore();\n  const useThreadList = useThreadListStore(runtime);\n  const context = useMemo(() => {\n    return {\n      useToolUIs,\n      useAssistantRuntime,\n      useThreadList,\n    };\n  }, [useAssistantRuntime, useToolUIs, useThreadList]);\n\n  const RenderComponent = getRenderComponent(runtime);\n\n  return (\n    <AssistantContext.Provider value={context}>\n      {RenderComponent && <RenderComponent />}\n      <ThreadRuntimeProvider\n        runtime={runtime.thread}\n        listItemRuntime={runtime.threadList.mainItem}\n      >\n        {children}\n      </ThreadRuntimeProvider>\n    </AssistantContext.Provider>\n  );\n};\n\nexport const AssistantRuntimeProvider = memo(AssistantRuntimeProviderImpl);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,mBAOO;AACP,8BAAiC;AACjC,8BAA0C;AAC1C,mCAAsC;AAEtC,qBAAuB;AACvB,2BAA8B;AA4D1B;AAhDJ,IAAM,2BAA2B,CAAC,YAA8B;AAC9D,QAAM,CAAC,KAAK,QAAI,uBAAS,UAAM,uBAAO,MAAM,OAAO,CAAC;AAEpD,8BAAU,MAAM;AACd,4CAAc,KAAK,EAAE,SAAS,SAAS,IAAI;AAAA,EAC7C,GAAG,CAAC,SAAS,KAAK,CAAC;AAEnB,SAAO;AACT;AAEA,IAAM,2BAA2B,MAAM;AACrC,aAAO,sBAAQ,UAAM,mDAA0B,GAAG,CAAC,CAAC;AACtD;AAEA,IAAM,qBAAqB,CAAC,YAA8B;AACxD,QAAM,CAAC,KAAK,QAAI,uBAAS,UAAM,uBAAO,MAAM,QAAQ,WAAW,SAAS,CAAC,CAAC;AAE1E,8BAAU,MAAM;AACd,UAAM,cAAc,UAClB,oCAAc,KAAK,EAAE,SAAS,QAAQ,WAAW,SAAS,GAAG,IAAI;AACnE,gBAAY;AACZ,WAAO,QAAQ,WAAW,UAAU,WAAW;AAAA,EACjD,GAAG,CAAC,SAAS,KAAK,CAAC;AAEnB,SAAO;AACT;AAEA,IAAM,qBAAqB,CAAC,YAA8B;AACxD,SAAQ,QAA6C,OAAO;AAC9D;AAEO,IAAM,+BAET,CAAC,EAAE,UAAU,QAAQ,MAAM;AAC7B,QAAM,sBAAsB,yBAAyB,OAAO;AAC5D,QAAM,aAAa,yBAAyB;AAC5C,QAAM,gBAAgB,mBAAmB,OAAO;AAChD,QAAM,cAAU,sBAAQ,MAAM;AAC5B,WAAO;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA,EACF,GAAG,CAAC,qBAAqB,YAAY,aAAa,CAAC;AAEnD,QAAM,kBAAkB,mBAAmB,OAAO;AAElD,SACE,6CAAC,yCAAiB,UAAjB,EAA0B,OAAO,SAC/B;AAAA,uBAAmB,4CAAC,mBAAgB;AAAA,IACrC;AAAA,MAAC;AAAA;AAAA,QACC,SAAS,QAAQ;AAAA,QACjB,iBAAiB,QAAQ,WAAW;AAAA,QAEnC;AAAA;AAAA,IACH;AAAA,KACF;AAEJ;AAEO,IAAM,+BAA2B,mBAAK,4BAA4B;","names":[]}