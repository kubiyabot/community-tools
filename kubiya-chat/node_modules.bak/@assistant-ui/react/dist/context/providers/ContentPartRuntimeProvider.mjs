"use client";

// src/context/providers/ContentPartRuntimeProvider.tsx
import { useEffect, useState } from "react";
import { create } from "zustand";
import { ContentPartContext } from "../react/ContentPartContext.mjs";
import { writableStore } from "../ReadonlyStore.mjs";
import { jsx } from "react/jsx-runtime";
var useContentPartRuntimeStore = (runtime) => {
  const [store] = useState(() => create(() => runtime));
  useEffect(() => {
    writableStore(store).setState(runtime, true);
  }, [runtime, store]);
  return store;
};
var useContentPartStore = (runtime) => {
  const [store] = useState(() => create(() => runtime.getState()));
  useEffect(() => {
    const updateState = () => writableStore(store).setState(runtime.getState(), true);
    updateState();
    return runtime.subscribe(updateState);
  }, [runtime, store]);
  return store;
};
var ContentPartRuntimeProvider = ({ runtime, children }) => {
  const useContentPartRuntime = useContentPartRuntimeStore(runtime);
  const useContentPart = useContentPartStore(runtime);
  const [context] = useState(() => {
    return { useContentPartRuntime, useContentPart };
  });
  return /* @__PURE__ */ jsx(ContentPartContext.Provider, { value: context, children });
};
export {
  ContentPartRuntimeProvider,
  useContentPartStore
};
//# sourceMappingURL=ContentPartRuntimeProvider.mjs.map