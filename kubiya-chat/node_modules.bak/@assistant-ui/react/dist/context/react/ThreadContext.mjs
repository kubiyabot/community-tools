"use client";

// src/context/react/ThreadContext.ts
import { createContext, useEffect, useState } from "react";
import { createContextHook } from "./utils/createContextHook.mjs";
import { createContextStoreHook } from "./utils/createContextStoreHook.mjs";
var ThreadContext = createContext(null);
var useThreadContext = createContextHook(
  ThreadContext,
  "AssistantRuntimeProvider"
);
function useThreadRuntime(options) {
  const context = useThreadContext(options);
  if (!context) return null;
  return context.useThreadRuntime();
}
var { useThread } = createContextStoreHook(
  useThreadContext,
  "useThread"
);
var { useComposer: useThreadComposer } = createContextStoreHook(
  useThreadContext,
  "useComposer"
);
var {
  useViewport: useThreadViewport,
  useViewportStore: useThreadViewportStore
} = createContextStoreHook(useThreadContext, "useViewport");
function useThreadModelConfig(options) {
  const [, rerender] = useState({});
  const runtime = useThreadRuntime(options);
  useEffect(() => {
    return runtime?.unstable_on("model-config-update", () => rerender({}));
  }, [runtime]);
  if (!runtime) return null;
  return runtime?.getModelConfig();
}
export {
  ThreadContext,
  useThread,
  useThreadComposer,
  useThreadContext,
  useThreadModelConfig,
  useThreadRuntime,
  useThreadViewport,
  useThreadViewportStore
};
//# sourceMappingURL=ThreadContext.mjs.map