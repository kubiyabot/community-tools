import type { ThreadViewportState } from "../stores/ThreadViewport";
import { ReadonlyStore } from "../ReadonlyStore";
import { UseBoundStore } from "zustand";
import { ThreadRuntime } from "../../api/ThreadRuntime";
import { ThreadState } from "../../api/ThreadRuntime";
import { ModelConfig } from "../../types";
import { ThreadComposerState } from "../../api/ComposerRuntime";
export type ThreadContextValue = {
    useThread: UseBoundStore<ReadonlyStore<ThreadState>>;
    useThreadRuntime: UseBoundStore<ReadonlyStore<ThreadRuntime>>;
    useComposer: UseBoundStore<ReadonlyStore<ThreadComposerState>>;
    useViewport: UseBoundStore<ReadonlyStore<ThreadViewportState>>;
};
export declare const ThreadContext: import("react").Context<ThreadContextValue | null>;
export declare const useThreadContext: {
    (options?: {
        optional?: false | undefined;
    } | undefined): ThreadContextValue;
    (options?: {
        optional?: boolean | undefined;
    } | undefined): ThreadContextValue | null;
};
export declare function useThreadRuntime(options?: {
    optional?: false | undefined;
}): ThreadRuntime;
export declare function useThreadRuntime(options?: {
    optional?: boolean | undefined;
}): ThreadRuntime | null;
export declare const useThread: {
    (): ThreadState;
    <TSelected>(selector: (state: ThreadState) => TSelected): TSelected;
    (options: {
        optional: true;
    }): ThreadState | null;
    <TSelected>(options: {
        optional: true;
        selector?: (state: ThreadState) => TSelected;
    }): TSelected | null;
};
export declare const useThreadComposer: {
    (): ThreadComposerState;
    <TSelected>(selector: (state: ThreadComposerState) => TSelected): TSelected;
    (options: {
        optional: true;
    }): ThreadComposerState | null;
    <TSelected>(options: {
        optional: true;
        selector?: (state: ThreadComposerState) => TSelected;
    }): TSelected | null;
};
export declare const useThreadViewport: {
    (): ThreadViewportState;
    <TSelected>(selector: (state: ThreadViewportState) => TSelected): TSelected;
    (options: {
        optional: true;
    }): ThreadViewportState | null;
    <TSelected>(options: {
        optional: true;
        selector?: (state: ThreadViewportState) => TSelected;
    }): TSelected | null;
}, useThreadViewportStore: {
    (): ReadonlyStore<ThreadViewportState>;
    (options: {
        optional: true;
    }): ReadonlyStore<ThreadViewportState> | null;
};
export declare function useThreadModelConfig(options?: {
    optional?: false | undefined;
}): ModelConfig;
export declare function useThreadModelConfig(options?: {
    optional?: boolean | undefined;
}): ModelConfig | null;
//# sourceMappingURL=ThreadContext.d.ts.map