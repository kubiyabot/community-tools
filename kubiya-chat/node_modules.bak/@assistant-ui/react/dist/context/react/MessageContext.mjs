"use client";

// src/context/react/MessageContext.ts
import { createContext } from "react";
import { createContextHook } from "./utils/createContextHook.mjs";
import { createContextStoreHook } from "./utils/createContextStoreHook.mjs";
var MessageContext = createContext(null);
var useMessageContext = createContextHook(
  MessageContext,
  "a component passed to <ThreadPrimitive.Messages components={...} />"
);
function useMessageRuntime(options) {
  const context = useMessageContext(options);
  if (!context) return null;
  return context.useMessageRuntime();
}
var { useMessage } = createContextStoreHook(
  useMessageContext,
  "useMessage"
);
var { useMessageUtils, useMessageUtilsStore } = createContextStoreHook(
  useMessageContext,
  "useMessageUtils"
);
var { useEditComposer } = createContextStoreHook(
  useMessageContext,
  "useEditComposer"
);
export {
  MessageContext,
  useEditComposer,
  useMessage,
  useMessageContext,
  useMessageRuntime,
  useMessageUtils,
  useMessageUtilsStore
};
//# sourceMappingURL=MessageContext.mjs.map