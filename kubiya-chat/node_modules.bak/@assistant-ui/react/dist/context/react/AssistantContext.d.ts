import type { AssistantToolUIsState } from "../stores/AssistantToolUIs";
import { ReadonlyStore } from "../ReadonlyStore";
import { UseBoundStore } from "zustand";
import { AssistantRuntime } from "../../api/AssistantRuntime";
import { ThreadListState } from "../../api/ThreadListRuntime";
export type AssistantContextValue = {
    useToolUIs: UseBoundStore<ReadonlyStore<AssistantToolUIsState>>;
    useAssistantRuntime: UseBoundStore<ReadonlyStore<AssistantRuntime>>;
    useThreadList: UseBoundStore<ReadonlyStore<ThreadListState>>;
};
export declare const AssistantContext: import("react").Context<AssistantContextValue | null>;
export declare const useAssistantContext: {
    (options?: {
        optional?: false | undefined;
    } | undefined): AssistantContextValue;
    (options?: {
        optional?: boolean | undefined;
    } | undefined): AssistantContextValue | null;
};
export declare function useAssistantRuntime(options?: {
    optional?: false | undefined;
}): AssistantRuntime;
export declare function useAssistantRuntime(options?: {
    optional?: boolean | undefined;
}): AssistantRuntime | null;
export declare const useToolUIs: {
    (): AssistantToolUIsState;
    <TSelected>(selector: (state: AssistantToolUIsState) => TSelected): TSelected;
    (options: {
        optional: true;
    }): AssistantToolUIsState | null;
    <TSelected>(options: {
        optional: true;
        selector?: (state: AssistantToolUIsState) => TSelected;
    }): TSelected | null;
}, useToolUIsStore: {
    (): ReadonlyStore<AssistantToolUIsState>;
    (options: {
        optional: true;
    }): ReadonlyStore<AssistantToolUIsState> | null;
};
export declare const useThreadList: {
    (): ThreadListState;
    <TSelected>(selector: (state: ThreadListState) => TSelected): TSelected;
    (options: {
        optional: true;
    }): ThreadListState | null;
    <TSelected>(options: {
        optional: true;
        selector?: (state: ThreadListState) => TSelected;
    }): TSelected | null;
};
//# sourceMappingURL=AssistantContext.d.ts.map