"use strict";
"use client";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/context/react/ComposerContext.ts
var ComposerContext_exports = {};
__export(ComposerContext_exports, {
  useComposer: () => useComposer,
  useComposerContext: () => useComposerContext,
  useComposerRuntime: () => useComposerRuntime
});
module.exports = __toCommonJS(ComposerContext_exports);
var import_react = require("react");
var import_MessageContext = require("./MessageContext.js");
var import_ThreadContext = require("./ThreadContext.js");
var import_createContextStoreHook = require("./utils/createContextStoreHook.js");
var useComposerContext = () => {
  const { useComposer: useThreadComposer } = (0, import_ThreadContext.useThreadContext)();
  const { useEditComposer } = (0, import_MessageContext.useMessageContext)({ optional: true }) ?? {};
  return (0, import_react.useMemo)(
    () => ({
      useComposer: useEditComposer ?? useThreadComposer,
      type: useEditComposer ? "edit" : "new"
    }),
    [useEditComposer, useThreadComposer]
  );
};
var { useComposer } = (0, import_createContextStoreHook.createContextStoreHook)(
  useComposerContext,
  "useComposer"
);
function useComposerRuntime(options) {
  const messageRuntime = (0, import_MessageContext.useMessageRuntime)({ optional: true });
  const threadRuntime = (0, import_ThreadContext.useThreadRuntime)(options);
  return messageRuntime ? messageRuntime.composer : threadRuntime?.composer ?? null;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  useComposer,
  useComposerContext,
  useComposerRuntime
});
//# sourceMappingURL=ComposerContext.js.map