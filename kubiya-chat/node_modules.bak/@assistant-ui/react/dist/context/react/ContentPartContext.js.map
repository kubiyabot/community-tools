{"version":3,"sources":["../../../src/context/react/ContentPartContext.ts"],"sourcesContent":["\"use client\";\n\nimport { createContext } from \"react\";\nimport { ReadonlyStore } from \"../ReadonlyStore\";\nimport { createContextStoreHook } from \"./utils/createContextStoreHook\";\nimport { createContextHook } from \"./utils/createContextHook\";\nimport { UseBoundStore } from \"zustand\";\nimport { ContentPartRuntime } from \"../../api/ContentPartRuntime\";\nimport { ContentPartState } from \"../../api/ContentPartRuntime\";\n\nexport type ContentPartContextValue = {\n  useContentPartRuntime: UseBoundStore<ReadonlyStore<ContentPartRuntime>>;\n  useContentPart: UseBoundStore<ReadonlyStore<ContentPartState>>;\n};\n\nexport const ContentPartContext = createContext<ContentPartContextValue | null>(\n  null,\n);\n\nexport const useContentPartContext = createContextHook(\n  ContentPartContext,\n  \"a component passed to <MessagePrimitive.Content components={...}>\",\n);\n\nexport function useContentPartRuntime(options?: {\n  optional?: false | undefined;\n}): ContentPartRuntime;\nexport function useContentPartRuntime(options?: {\n  optional?: boolean | undefined;\n}): ContentPartRuntime | null;\nexport function useContentPartRuntime(options?: {\n  optional?: boolean | undefined;\n}) {\n  const context = useContentPartContext(options);\n  if (!context) return null;\n  return context.useContentPartRuntime();\n}\n\nexport const { useContentPart } = createContextStoreHook(\n  useContentPartContext,\n  \"useContentPart\",\n);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,mBAA8B;AAE9B,oCAAuC;AACvC,+BAAkC;AAU3B,IAAM,yBAAqB;AAAA,EAChC;AACF;AAEO,IAAM,4BAAwB;AAAA,EACnC;AAAA,EACA;AACF;AAQO,SAAS,sBAAsB,SAEnC;AACD,QAAM,UAAU,sBAAsB,OAAO;AAC7C,MAAI,CAAC,QAAS,QAAO;AACrB,SAAO,QAAQ,sBAAsB;AACvC;AAEO,IAAM,EAAE,eAAe,QAAI;AAAA,EAChC;AAAA,EACA;AACF;","names":[]}