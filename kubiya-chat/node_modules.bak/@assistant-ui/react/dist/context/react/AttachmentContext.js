"use strict";
"use client";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/context/react/AttachmentContext.ts
var AttachmentContext_exports = {};
__export(AttachmentContext_exports, {
  AttachmentContext: () => AttachmentContext,
  useAttachment: () => useAttachment,
  useAttachmentContext: () => useAttachmentContext,
  useAttachmentRuntime: () => useAttachmentRuntime,
  useEditComposerAttachment: () => useEditComposerAttachment,
  useEditComposerAttachmentRuntime: () => useEditComposerAttachmentRuntime,
  useMessageAttachment: () => useMessageAttachment,
  useMessageAttachmentRuntime: () => useMessageAttachmentRuntime,
  useThreadComposerAttachment: () => useThreadComposerAttachment,
  useThreadComposerAttachmentRuntime: () => useThreadComposerAttachmentRuntime
});
module.exports = __toCommonJS(AttachmentContext_exports);
var import_react = require("react");
var import_createContextStoreHook = require("./utils/createContextStoreHook.js");
var AttachmentContext = (0, import_react.createContext)(
  null
);
function useAttachmentContext(options) {
  const context = (0, import_react.useContext)(AttachmentContext);
  if (!options?.optional && !context)
    throw new Error(
      "This component must be used within a ComposerPrimitive.Attachments or MessagePrimitive.Attachments component."
    );
  return context;
}
function useThreadComposerAttachmentContext(options) {
  const context = useAttachmentContext(options);
  if (!context) return null;
  if (context.source !== "thread-composer")
    throw new Error(
      "This component must be used within a thread's ComposerPrimitive.Attachments component."
    );
  return context;
}
function useEditComposerAttachmentContext(options) {
  const context = useAttachmentContext(options);
  if (!context) return null;
  if (context.source !== "edit-composer")
    throw new Error(
      "This component must be used within a messages's ComposerPrimitive.Attachments component."
    );
  return context;
}
function useMessageAttachmentContext(options) {
  const context = useAttachmentContext(options);
  if (!context) return null;
  if (context.source !== "message")
    throw new Error(
      "This component must be used within a MessagePrimitive.Attachments component."
    );
  return context;
}
function useAttachmentRuntime(options) {
  const attachmentRuntime = useAttachmentContext(options);
  if (!attachmentRuntime) return null;
  return attachmentRuntime.useAttachmentRuntime();
}
function useThreadComposerAttachmentRuntime(options) {
  const attachmentRuntime = useThreadComposerAttachmentContext(options);
  if (!attachmentRuntime) return null;
  return attachmentRuntime.useAttachmentRuntime();
}
function useEditComposerAttachmentRuntime(options) {
  const attachmentRuntime = useEditComposerAttachmentContext(options);
  if (!attachmentRuntime) return null;
  return attachmentRuntime.useAttachmentRuntime();
}
function useMessageAttachmentRuntime(options) {
  const attachmentRuntime = useMessageAttachmentContext(options);
  if (!attachmentRuntime) return null;
  return attachmentRuntime.useAttachmentRuntime();
}
var { useAttachment } = (0, import_createContextStoreHook.createContextStoreHook)(
  useAttachmentContext,
  "useAttachment"
);
var { useAttachment: useThreadComposerAttachment } = (0, import_createContextStoreHook.createContextStoreHook)(useThreadComposerAttachmentContext, "useAttachment");
var { useAttachment: useEditComposerAttachment } = (0, import_createContextStoreHook.createContextStoreHook)(useEditComposerAttachmentContext, "useAttachment");
var { useAttachment: useMessageAttachment } = (0, import_createContextStoreHook.createContextStoreHook)(
  useMessageAttachmentContext,
  "useAttachment"
);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  AttachmentContext,
  useAttachment,
  useAttachmentContext,
  useAttachmentRuntime,
  useEditComposerAttachment,
  useEditComposerAttachmentRuntime,
  useMessageAttachment,
  useMessageAttachmentRuntime,
  useThreadComposerAttachment,
  useThreadComposerAttachmentRuntime
});
//# sourceMappingURL=AttachmentContext.js.map