"use client";

// src/primitives/MarkdownText.tsx
import { INTERNAL, useContentPartText } from "@assistant-ui/react";
import {
  forwardRef
} from "react";
import ReactMarkdown from "react-markdown";
import { PreOverride } from "../overrides/PreOverride.mjs";
import {
  DefaultPre,
  DefaultCode,
  DefaultCodeBlockContent,
  DefaultCodeHeader
} from "../overrides/defaultComponents.mjs";
import { useCallbackRef } from "@radix-ui/react-use-callback-ref";
import { CodeOverride } from "../overrides/CodeOverride.mjs";
import classNames from "classnames";
import { jsx } from "react/jsx-runtime";
var { useSmooth } = INTERNAL;
var MarkdownTextPrimitive = forwardRef(
  ({
    components: userComponents,
    componentsByLanguage = userComponents?.by_language,
    className,
    containerProps,
    containerComponent: Container = "div",
    smooth = true,
    ...rest
  }, forwardedRef) => {
    const { text, status } = useSmooth(useContentPartText(), smooth);
    const {
      pre = DefaultPre,
      code = DefaultCode,
      SyntaxHighlighter = DefaultCodeBlockContent,
      CodeHeader = DefaultCodeHeader,
      by_language,
      ...componentsRest
    } = userComponents ?? {};
    const components = {
      ...componentsRest,
      pre: PreOverride,
      code: useCallbackRef((props) => /* @__PURE__ */ jsx(
        CodeOverride,
        {
          components: {
            Pre: pre,
            Code: code,
            SyntaxHighlighter,
            CodeHeader
          },
          componentsByLanguage,
          ...props
        }
      ))
    };
    return /* @__PURE__ */ jsx(
      Container,
      {
        "data-status": status.type,
        ...containerProps,
        className: classNames(className, containerProps?.className),
        ref: forwardedRef,
        children: /* @__PURE__ */ jsx(ReactMarkdown, { components, ...rest, children: text })
      }
    );
  }
);
MarkdownTextPrimitive.displayName = "MarkdownTextPrimitive";
export {
  MarkdownTextPrimitive
};
//# sourceMappingURL=MarkdownText.mjs.map