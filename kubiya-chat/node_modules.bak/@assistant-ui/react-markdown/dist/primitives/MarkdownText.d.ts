import { ComponentRef, ElementType, ForwardRefExoticComponent, RefAttributes, type ComponentPropsWithoutRef, type ComponentType } from "react";
import { type Options } from "react-markdown";
import { SyntaxHighlighterProps, CodeHeaderProps } from "../overrides/types";
import { Primitive } from "@radix-ui/react-primitive";
type MarkdownTextPrimitiveElement = ComponentRef<typeof Primitive.div>;
type PrimitiveDivProps = ComponentPropsWithoutRef<typeof Primitive.div>;
export type MarkdownTextPrimitiveProps = Omit<Options, "components" | "children"> & {
    containerProps?: Omit<PrimitiveDivProps, "children" | "asChild"> | undefined;
    containerComponent?: ElementType | undefined;
    components?: (NonNullable<Options["components"]> & {
        SyntaxHighlighter?: ComponentType<SyntaxHighlighterProps> | undefined;
        CodeHeader?: ComponentType<CodeHeaderProps> | undefined;
        /**
         * @deprecated Use `componentsByLanguage` instead of `components.by_language`. This will be removed in the next major version.
         **/
        by_language?: undefined;
    }) | undefined;
    componentsByLanguage?: Record<string, {
        CodeHeader?: ComponentType<CodeHeaderProps> | undefined;
        SyntaxHighlighter?: ComponentType<SyntaxHighlighterProps> | undefined;
    }> | undefined;
    smooth?: boolean | undefined;
};
export declare const MarkdownTextPrimitive: ForwardRefExoticComponent<MarkdownTextPrimitiveProps> & RefAttributes<MarkdownTextPrimitiveElement>;
export {};
//# sourceMappingURL=MarkdownText.d.ts.map