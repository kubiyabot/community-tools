name: Python Application CI/CD
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Step that might fail
      run: |
        {
          echo "GITHUB_WORKFLOW: $GITHUB_WORKFLOW"
          echo "GITHUB_ACTION: $GITHUB_ACTION"
          echo "GITHUB_EVENT_NAME: $GITHUB_EVENT_NAME"
          echo "GITHUB_SHA: $GITHUB_SHA"
          echo "GITHUB_REF: $GITHUB_REF"
          echo "Python version:"
          python --version
          echo "Pip list:"
          pip list
          echo "Flake8 output:"
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          echo "Pytest output:"
          pytest tests/ || echo "Tests failed"
          echo "Docker version:"
          docker --version
          echo "Docker images:"
          docker images
          echo "Step outputs:"
          echo "${{ toJson(steps) }}"
        } > error.log

    - name: Send notification
      if: always()
      run: |
        LOGS=$(cat error.log)
        TRUNCATED_LOGS="${LOGS:0:65000}"
        ESCAPED_LOGS=$(echo "$TRUNCATED_LOGS" | jq -sRr @json)
      
        # Extract additional details
        REPO_NAME=$(echo "$GITHUB_REPOSITORY" | cut -d'/' -f2)
        ORG_NAME=$(echo "$GITHUB_REPOSITORY" | cut -d'/' -f1)
        PR_NUMBER=$(echo "$GITHUB_REF" | grep -o 'pull/[0-9]\+' | cut -d'/' -f2 || echo "N/A") 

            # Create payload
        PAYLOAD=$(jq -n \
                    --arg status "${{ job.status }}" \
                    --arg repo "$GITHUB_REPOSITORY" \
                    --arg repo_name "$REPO_NAME" \
                    --arg org_name "$ORG_NAME" \
                    --arg workflow "$GITHUB_WORKFLOW" \
                    --arg commit "$GITHUB_SHA" \
                    --arg pr_number "$PR_NUMBER" \
                    --arg logs "$ESCAPED_LOGS" \
                    '{status: $status, repo: $repo_name, org_name: $org_name, workflow: $workflow, commit: $commit, pr_number: $pr_number, logs: $logs}')
        curl -X POST -H "Content-Type: application/json" \
        -d "$PAYLOAD" \
        https://webhooksource-kubiya.hooks.kubiya.ai:8443/nMUePj-nJI2uQCouSReO8ldNws6sVzouRwNEprvZWlWKw2IC90hDkTyOx2ljo4_Y8MK3X9LXDCdkmYauuI0=

  # notify:
  #   needs: build
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Notify on Failure
  #     if: always()
  #     run: |
  #       LOGS=$(cat detailed_logs.txt)
  #       if [ ! -s detailed_logs.txt ]; then
  #         echo "Log file is empty. Exiting step."
  #         exit 0
  #       fi
  #       TRUNCATED_LOGS="${LOGS:0:65000}"
  #       ESCAPED_LOGS=$(echo "$TRUNCATED_LOGS" | jq -sRr @json)
      
  #       # Extract additional details
  #       REPO_NAME=$(echo "$GITHUB_REPOSITORY" | cut -d'/' -f2)
  #       ORG_NAME=$(echo "$GITHUB_REPOSITORY" | cut -d'/' -f1)
  #       PR_NUMBER=$(echo "$GITHUB_REF" | grep -o 'pull/[0-9]\+' | cut -d'/' -f2 || echo "N/A") 

  #           # Create payload
  #       PAYLOAD=$(jq -n \
  #                   --arg status "${{ job.status }}" \
  #                   --arg repo "$GITHUB_REPOSITORY" \
  #                   --arg repo_name "$REPO_NAME" \
  #                   --arg org_name "$ORG_NAME" \
  #                   --arg workflow "$GITHUB_WORKFLOW" \
  #                   --arg commit "$GITHUB_SHA" \
  #                   --arg pr_number "$PR_NUMBER" \
  #                   --arg logs "$ESCAPED_LOGS" \
  #                   '{status: $status, repo: $repo_name, org_name: $org_name, workflow: $workflow, commit: $commit, pr_number: $pr_number, logs: $logs}')
  #       curl -X POST -H "Content-Type: application/json" \
  #       -d "$PAYLOAD" \
  #       https://webhooksource-kubiya.hooks.kubiya.ai:8443/nMUePj-nJI2uQCouSReO8ldNws6sVzouRwNEprvZWlWKw2IC90hDkTyOx2ljo4_Y8MK3X9LXDCdkmYauuI0=
